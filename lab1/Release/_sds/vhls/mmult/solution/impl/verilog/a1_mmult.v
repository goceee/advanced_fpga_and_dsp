// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="a1_mmult,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.256000,HLS_SYN_LAT=364674,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=5,HLS_SYN_FF=607,HLS_SYN_LUT=1087,HLS_VERSION=2018_2}" *)

module a1_mmult (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        A_Addr_A,
        A_EN_A,
        A_WEN_A,
        A_Din_A,
        A_Dout_A,
        A_Clk_A,
        A_Rst_A,
        B_Addr_A,
        B_EN_A,
        B_WEN_A,
        B_Din_A,
        B_Dout_A,
        B_Clk_A,
        B_Rst_A,
        C_Addr_A,
        C_EN_A,
        C_WEN_A,
        C_Din_A,
        C_Dout_A,
        C_Clk_A,
        C_Rst_A
);

parameter    ap_ST_fsm_state1 = 17'd1;
parameter    ap_ST_fsm_state2 = 17'd2;
parameter    ap_ST_fsm_state3 = 17'd4;
parameter    ap_ST_fsm_state4 = 17'd8;
parameter    ap_ST_fsm_state5 = 17'd16;
parameter    ap_ST_fsm_state6 = 17'd32;
parameter    ap_ST_fsm_state7 = 17'd64;
parameter    ap_ST_fsm_state8 = 17'd128;
parameter    ap_ST_fsm_state9 = 17'd256;
parameter    ap_ST_fsm_state10 = 17'd512;
parameter    ap_ST_fsm_state11 = 17'd1024;
parameter    ap_ST_fsm_state12 = 17'd2048;
parameter    ap_ST_fsm_state13 = 17'd4096;
parameter    ap_ST_fsm_state14 = 17'd8192;
parameter    ap_ST_fsm_state15 = 17'd16384;
parameter    ap_ST_fsm_state16 = 17'd32768;
parameter    ap_ST_fsm_state17 = 17'd65536;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] A_Addr_A;
output   A_EN_A;
output  [3:0] A_WEN_A;
output  [31:0] A_Din_A;
input  [31:0] A_Dout_A;
output   A_Clk_A;
output   A_Rst_A;
output  [31:0] B_Addr_A;
output   B_EN_A;
output  [3:0] B_WEN_A;
output  [31:0] B_Din_A;
input  [31:0] B_Dout_A;
output   B_Clk_A;
output   B_Rst_A;
output  [31:0] C_Addr_A;
output   C_EN_A;
output  [3:0] C_WEN_A;
output  [31:0] C_Din_A;
input  [31:0] C_Dout_A;
output   C_Clk_A;
output   C_Rst_A;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg A_EN_A;
reg B_EN_A;
reg C_EN_A;
reg[3:0] C_WEN_A;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [16:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [11:0] tmp_3_cast_fu_220_p1;
reg   [11:0] tmp_3_cast_reg_403;
wire    ap_CS_fsm_state2;
wire   [5:0] i_1_fu_230_p2;
reg   [5:0] i_1_reg_411;
wire   [9:0] tmp_fu_240_p3;
reg   [9:0] tmp_reg_416;
wire   [0:0] exitcond4_fu_224_p2;
reg   [9:0] Abuf_addr_reg_421;
wire    ap_CS_fsm_state3;
reg   [9:0] Bbuf_addr_reg_426;
wire   [5:0] j_1_fu_273_p2;
reg   [5:0] j_1_reg_434;
wire   [0:0] exitcond3_fu_267_p2;
wire   [11:0] tmp_6_cast_fu_298_p1;
reg   [11:0] tmp_6_cast_reg_449;
wire    ap_CS_fsm_state5;
wire   [5:0] i_2_fu_308_p2;
reg   [5:0] i_2_reg_457;
wire   [9:0] tmp_1_fu_318_p3;
reg   [9:0] tmp_1_reg_462;
wire   [0:0] exitcond2_fu_302_p2;
wire   [9:0] j2_cast3_fu_326_p1;
reg   [9:0] j2_cast3_reg_467;
wire    ap_CS_fsm_state6;
wire   [11:0] j2_cast2_cast_fu_330_p1;
reg   [11:0] j2_cast2_cast_reg_472;
wire   [5:0] j_2_fu_340_p2;
reg   [5:0] j_2_reg_480;
wire    ap_CS_fsm_state7;
wire   [5:0] k_1_fu_388_p2;
reg   [5:0] k_1_reg_498;
wire   [31:0] Abuf_q0;
reg   [31:0] Abuf_load_reg_503;
wire    ap_CS_fsm_state8;
wire   [31:0] Bbuf_q0;
reg   [31:0] Bbuf_load_reg_508;
wire   [31:0] grp_fu_208_p2;
reg   [31:0] term_reg_513;
wire    ap_CS_fsm_state12;
wire   [31:0] grp_fu_203_p2;
wire    ap_CS_fsm_state17;
reg   [9:0] Abuf_address0;
reg    Abuf_ce0;
reg    Abuf_we0;
reg   [9:0] Bbuf_address0;
reg    Bbuf_ce0;
reg    Bbuf_we0;
reg   [5:0] i_reg_135;
reg   [5:0] j_reg_146;
wire    ap_CS_fsm_state4;
reg   [5:0] i1_reg_157;
wire   [0:0] exitcond1_fu_334_p2;
reg   [5:0] j2_reg_168;
wire   [0:0] exitcond_fu_382_p2;
reg   [31:0] result_reg_179;
reg   [5:0] k_reg_192;
wire   [31:0] tmp_7_cast_fu_261_p1;
wire   [31:0] sum_cast_fu_284_p1;
wire   [31:0] tmp_9_cast_fu_355_p1;
wire   [31:0] tmp_12_cast_fu_377_p1;
wire   [31:0] sum6_cast_fu_398_p1;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state9;
wire   [10:0] tmp_2_fu_212_p3;
wire   [4:0] tmp_3_fu_236_p1;
wire   [11:0] j_cast6_cast_fu_252_p1;
wire   [11:0] tmp_7_fu_256_p2;
wire   [9:0] j_cast7_fu_248_p1;
wire   [9:0] sum_fu_279_p2;
wire   [10:0] tmp_5_fu_290_p3;
wire   [4:0] tmp_4_fu_314_p1;
wire   [11:0] k_cast1_cast_fu_346_p1;
wire   [11:0] tmp_9_fu_350_p2;
wire   [10:0] tmp_s_fu_360_p3;
wire   [11:0] tmp_11_cast_fu_368_p1;
wire   [11:0] tmp_6_fu_372_p2;
wire   [9:0] sum6_fu_394_p2;
reg   [16:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 17'd1;
end

a1_mmult_Abuf #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
Abuf_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(Abuf_address0),
    .ce0(Abuf_ce0),
    .we0(Abuf_we0),
    .d0(A_Dout_A),
    .q0(Abuf_q0)
);

a1_mmult_Abuf #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
Bbuf_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(Bbuf_address0),
    .ce0(Bbuf_ce0),
    .we0(Bbuf_we0),
    .d0(B_Dout_A),
    .q0(Bbuf_q0)
);

a1_mmult_fadd_32ns_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mmult_fadd_32ns_3bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(result_reg_179),
    .din1(term_reg_513),
    .ce(1'b1),
    .dout(grp_fu_203_p2)
);

a1_mmult_fmul_32ns_3cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mmult_fmul_32ns_3cud_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(Abuf_load_reg_503),
    .din1(Bbuf_load_reg_508),
    .ce(1'b1),
    .dout(grp_fu_208_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond4_fu_224_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i1_reg_157 <= 6'd0;
    end else if (((1'b1 == ap_CS_fsm_state6) & (exitcond1_fu_334_p2 == 1'd1))) begin
        i1_reg_157 <= i_2_reg_457;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_267_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_reg_135 <= i_1_reg_411;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_135 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_302_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        j2_reg_168 <= 6'd0;
    end else if (((1'b1 == ap_CS_fsm_state7) & (exitcond_fu_382_p2 == 1'd1))) begin
        j2_reg_168 <= j_2_reg_480;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond4_fu_224_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_reg_146 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        j_reg_146 <= j_1_reg_434;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_334_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        k_reg_192 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        k_reg_192 <= k_1_reg_498;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_334_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        result_reg_179 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        result_reg_179 <= grp_fu_203_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        Abuf_addr_reg_421 <= tmp_7_cast_fu_261_p1;
        Bbuf_addr_reg_426 <= tmp_7_cast_fu_261_p1;
        j_1_reg_434 <= j_1_fu_273_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        Abuf_load_reg_503 <= Abuf_q0;
        Bbuf_load_reg_508 <= Bbuf_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_1_reg_411 <= i_1_fu_230_p2;
        tmp_3_cast_reg_403[10 : 5] <= tmp_3_cast_fu_220_p1[10 : 5];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_2_reg_457 <= i_2_fu_308_p2;
        tmp_6_cast_reg_449[10 : 5] <= tmp_6_cast_fu_298_p1[10 : 5];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        j2_cast2_cast_reg_472[5 : 0] <= j2_cast2_cast_fu_330_p1[5 : 0];
        j2_cast3_reg_467[5 : 0] <= j2_cast3_fu_326_p1[5 : 0];
        j_2_reg_480 <= j_2_fu_340_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        k_1_reg_498 <= k_1_fu_388_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        term_reg_513 <= grp_fu_208_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_302_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        tmp_1_reg_462[9 : 5] <= tmp_1_fu_318_p3[9 : 5];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond4_fu_224_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_reg_416[9 : 5] <= tmp_fu_240_p3[9 : 5];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        A_EN_A = 1'b1;
    end else begin
        A_EN_A = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        Abuf_address0 = tmp_9_cast_fu_355_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        Abuf_address0 = Abuf_addr_reg_421;
    end else begin
        Abuf_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state7))) begin
        Abuf_ce0 = 1'b1;
    end else begin
        Abuf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        Abuf_we0 = 1'b1;
    end else begin
        Abuf_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        B_EN_A = 1'b1;
    end else begin
        B_EN_A = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        Bbuf_address0 = tmp_12_cast_fu_377_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        Bbuf_address0 = Bbuf_addr_reg_426;
    end else begin
        Bbuf_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state7))) begin
        Bbuf_ce0 = 1'b1;
    end else begin
        Bbuf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        Bbuf_we0 = 1'b1;
    end else begin
        Bbuf_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        C_EN_A = 1'b1;
    end else begin
        C_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (exitcond_fu_382_p2 == 1'd1))) begin
        C_WEN_A = 4'd15;
    end else begin
        C_WEN_A = 4'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (exitcond2_fu_302_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (exitcond2_fu_302_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond4_fu_224_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond3_fu_267_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (exitcond2_fu_302_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (exitcond1_fu_334_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (exitcond_fu_382_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_Addr_A = sum_cast_fu_284_p1 << 32'd2;

assign A_Clk_A = ap_clk;

assign A_Din_A = 32'd0;

assign A_Rst_A = ap_rst_n_inv;

assign A_WEN_A = 4'd0;

assign B_Addr_A = sum_cast_fu_284_p1 << 32'd2;

assign B_Clk_A = ap_clk;

assign B_Din_A = 32'd0;

assign B_Rst_A = ap_rst_n_inv;

assign B_WEN_A = 4'd0;

assign C_Addr_A = sum6_cast_fu_398_p1 << 32'd2;

assign C_Clk_A = ap_clk;

assign C_Din_A = result_reg_179;

assign C_Rst_A = ap_rst_n_inv;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign exitcond1_fu_334_p2 = ((j2_reg_168 == 6'd32) ? 1'b1 : 1'b0);

assign exitcond2_fu_302_p2 = ((i1_reg_157 == 6'd32) ? 1'b1 : 1'b0);

assign exitcond3_fu_267_p2 = ((j_reg_146 == 6'd32) ? 1'b1 : 1'b0);

assign exitcond4_fu_224_p2 = ((i_reg_135 == 6'd32) ? 1'b1 : 1'b0);

assign exitcond_fu_382_p2 = ((k_reg_192 == 6'd32) ? 1'b1 : 1'b0);

assign i_1_fu_230_p2 = (i_reg_135 + 6'd1);

assign i_2_fu_308_p2 = (i1_reg_157 + 6'd1);

assign j2_cast2_cast_fu_330_p1 = j2_reg_168;

assign j2_cast3_fu_326_p1 = j2_reg_168;

assign j_1_fu_273_p2 = (j_reg_146 + 6'd1);

assign j_2_fu_340_p2 = (j2_reg_168 + 6'd1);

assign j_cast6_cast_fu_252_p1 = j_reg_146;

assign j_cast7_fu_248_p1 = j_reg_146;

assign k_1_fu_388_p2 = (k_reg_192 + 6'd1);

assign k_cast1_cast_fu_346_p1 = k_reg_192;

assign sum6_cast_fu_398_p1 = sum6_fu_394_p2;

assign sum6_fu_394_p2 = (j2_cast3_reg_467 + tmp_1_reg_462);

assign sum_cast_fu_284_p1 = sum_fu_279_p2;

assign sum_fu_279_p2 = (j_cast7_fu_248_p1 + tmp_reg_416);

assign tmp_11_cast_fu_368_p1 = tmp_s_fu_360_p3;

assign tmp_12_cast_fu_377_p1 = tmp_6_fu_372_p2;

assign tmp_1_fu_318_p3 = {{tmp_4_fu_314_p1}, {5'd0}};

assign tmp_2_fu_212_p3 = {{i_reg_135}, {5'd0}};

assign tmp_3_cast_fu_220_p1 = tmp_2_fu_212_p3;

assign tmp_3_fu_236_p1 = i_reg_135[4:0];

assign tmp_4_fu_314_p1 = i1_reg_157[4:0];

assign tmp_5_fu_290_p3 = {{i1_reg_157}, {5'd0}};

assign tmp_6_cast_fu_298_p1 = tmp_5_fu_290_p3;

assign tmp_6_fu_372_p2 = (j2_cast2_cast_reg_472 + tmp_11_cast_fu_368_p1);

assign tmp_7_cast_fu_261_p1 = tmp_7_fu_256_p2;

assign tmp_7_fu_256_p2 = (tmp_3_cast_reg_403 + j_cast6_cast_fu_252_p1);

assign tmp_9_cast_fu_355_p1 = tmp_9_fu_350_p2;

assign tmp_9_fu_350_p2 = (k_cast1_cast_fu_346_p1 + tmp_6_cast_reg_449);

assign tmp_fu_240_p3 = {{tmp_3_fu_236_p1}, {5'd0}};

assign tmp_s_fu_360_p3 = {{k_reg_192}, {5'd0}};

always @ (posedge ap_clk) begin
    tmp_3_cast_reg_403[4:0] <= 5'b00000;
    tmp_3_cast_reg_403[11] <= 1'b0;
    tmp_reg_416[4:0] <= 5'b00000;
    tmp_6_cast_reg_449[4:0] <= 5'b00000;
    tmp_6_cast_reg_449[11] <= 1'b0;
    tmp_1_reg_462[4:0] <= 5'b00000;
    j2_cast3_reg_467[9:6] <= 4'b0000;
    j2_cast2_cast_reg_472[11:6] <= 6'b000000;
end

endmodule //a1_mmult
