-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity a1_mmult is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    A_EN_A : OUT STD_LOGIC;
    A_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    A_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    A_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    A_Clk_A : OUT STD_LOGIC;
    A_Rst_A : OUT STD_LOGIC;
    B_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    B_EN_A : OUT STD_LOGIC;
    B_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    B_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    B_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    B_Clk_A : OUT STD_LOGIC;
    B_Rst_A : OUT STD_LOGIC;
    C_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_EN_A : OUT STD_LOGIC;
    C_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    C_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    C_Clk_A : OUT STD_LOGIC;
    C_Rst_A : OUT STD_LOGIC );
end;


architecture behav of a1_mmult is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "a1_mmult,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.256000,HLS_SYN_LAT=364674,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=5,HLS_SYN_FF=607,HLS_SYN_LUT=1087,HLS_VERSION=2018_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (16 downto 0) := "00000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (16 downto 0) := "00000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (16 downto 0) := "00000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (16 downto 0) := "00000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (16 downto 0) := "00000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (16 downto 0) := "00000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (16 downto 0) := "00001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (16 downto 0) := "00010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (16 downto 0) := "00100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (16 downto 0) := "01000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (16 downto 0) := "10000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_3_cast_fu_220_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_3_cast_reg_403 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_1_fu_230_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_1_reg_411 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_240_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_reg_416 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond4_fu_224_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Abuf_addr_reg_421 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal Bbuf_addr_reg_426 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_1_fu_273_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_1_reg_434 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond3_fu_267_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_cast_fu_298_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_6_cast_reg_449 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i_2_fu_308_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_2_reg_457 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_1_fu_318_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_1_reg_462 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond2_fu_302_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j2_cast3_fu_326_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal j2_cast3_reg_467 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal j2_cast2_cast_fu_330_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal j2_cast2_cast_reg_472 : STD_LOGIC_VECTOR (11 downto 0);
    signal j_2_fu_340_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_2_reg_480 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal k_1_fu_388_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal k_1_reg_498 : STD_LOGIC_VECTOR (5 downto 0);
    signal Abuf_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Abuf_load_reg_503 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal Bbuf_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Bbuf_load_reg_508 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_208_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal term_reg_513 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_fu_203_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal Abuf_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal Abuf_ce0 : STD_LOGIC;
    signal Abuf_we0 : STD_LOGIC;
    signal Bbuf_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal Bbuf_ce0 : STD_LOGIC;
    signal Bbuf_we0 : STD_LOGIC;
    signal i_reg_135 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_reg_146 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i1_reg_157 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond1_fu_334_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j2_reg_168 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond_fu_382_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_reg_179 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_reg_192 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_7_cast_fu_261_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_cast_fu_284_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_cast_fu_355_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_cast_fu_377_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum6_cast_fu_398_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_2_fu_212_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_3_fu_236_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_cast6_cast_fu_252_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_7_fu_256_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal j_cast7_fu_248_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sum_fu_279_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_5_fu_290_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_4_fu_314_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal k_cast1_cast_fu_346_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_9_fu_350_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_s_fu_360_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_11_cast_fu_368_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_6_fu_372_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sum6_fu_394_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (16 downto 0);

    component a1_mmult_fadd_32ns_3bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component a1_mmult_fmul_32ns_3cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component a1_mmult_Abuf IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    Abuf_U : component a1_mmult_Abuf
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => Abuf_address0,
        ce0 => Abuf_ce0,
        we0 => Abuf_we0,
        d0 => A_Dout_A,
        q0 => Abuf_q0);

    Bbuf_U : component a1_mmult_Abuf
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => Bbuf_address0,
        ce0 => Bbuf_ce0,
        we0 => Bbuf_we0,
        d0 => B_Dout_A,
        q0 => Bbuf_q0);

    mmult_fadd_32ns_3bkb_U1 : component a1_mmult_fadd_32ns_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => result_reg_179,
        din1 => term_reg_513,
        ce => ap_const_logic_1,
        dout => grp_fu_203_p2);

    mmult_fmul_32ns_3cud_U2 : component a1_mmult_fmul_32ns_3cud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => Abuf_load_reg_503,
        din1 => Bbuf_load_reg_508,
        ce => ap_const_logic_1,
        dout => grp_fu_208_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i1_reg_157_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_224_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i1_reg_157 <= ap_const_lv6_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond1_fu_334_p2 = ap_const_lv1_1))) then 
                i1_reg_157 <= i_2_reg_457;
            end if; 
        end if;
    end process;

    i_reg_135_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_267_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_reg_135 <= i_1_reg_411;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_135 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    j2_reg_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_302_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                j2_reg_168 <= ap_const_lv6_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond_fu_382_p2 = ap_const_lv1_1))) then 
                j2_reg_168 <= j_2_reg_480;
            end if; 
        end if;
    end process;

    j_reg_146_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_224_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_reg_146 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                j_reg_146 <= j_1_reg_434;
            end if; 
        end if;
    end process;

    k_reg_192_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_334_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                k_reg_192 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                k_reg_192 <= k_1_reg_498;
            end if; 
        end if;
    end process;

    result_reg_179_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_334_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                result_reg_179 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                result_reg_179 <= grp_fu_203_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                Abuf_addr_reg_421 <= tmp_7_cast_fu_261_p1(10 - 1 downto 0);
                Bbuf_addr_reg_426 <= tmp_7_cast_fu_261_p1(10 - 1 downto 0);
                j_1_reg_434 <= j_1_fu_273_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                Abuf_load_reg_503 <= Abuf_q0;
                Bbuf_load_reg_508 <= Bbuf_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_1_reg_411 <= i_1_fu_230_p2;
                    tmp_3_cast_reg_403(10 downto 5) <= tmp_3_cast_fu_220_p1(10 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                i_2_reg_457 <= i_2_fu_308_p2;
                    tmp_6_cast_reg_449(10 downto 5) <= tmp_6_cast_fu_298_p1(10 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                    j2_cast2_cast_reg_472(5 downto 0) <= j2_cast2_cast_fu_330_p1(5 downto 0);
                    j2_cast3_reg_467(5 downto 0) <= j2_cast3_fu_326_p1(5 downto 0);
                j_2_reg_480 <= j_2_fu_340_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                k_1_reg_498 <= k_1_fu_388_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                term_reg_513 <= grp_fu_208_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_302_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    tmp_1_reg_462(9 downto 5) <= tmp_1_fu_318_p3(9 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_224_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    tmp_reg_416(9 downto 5) <= tmp_fu_240_p3(9 downto 5);
            end if;
        end if;
    end process;
    tmp_3_cast_reg_403(4 downto 0) <= "00000";
    tmp_3_cast_reg_403(11) <= '0';
    tmp_reg_416(4 downto 0) <= "00000";
    tmp_6_cast_reg_449(4 downto 0) <= "00000";
    tmp_6_cast_reg_449(11) <= '0';
    tmp_1_reg_462(4 downto 0) <= "00000";
    j2_cast3_reg_467(9 downto 6) <= "0000";
    j2_cast2_cast_reg_472(11 downto 6) <= "000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond4_fu_224_p2, ap_CS_fsm_state3, exitcond3_fu_267_p2, ap_CS_fsm_state5, exitcond2_fu_302_p2, ap_CS_fsm_state6, ap_CS_fsm_state7, exitcond1_fu_334_p2, exitcond_fu_382_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond4_fu_224_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond3_fu_267_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond2_fu_302_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond1_fu_334_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond_fu_382_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXX";
        end case;
    end process;
    A_Addr_A <= std_logic_vector(shift_left(unsigned(sum_cast_fu_284_p1),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    A_Clk_A <= ap_clk;
    A_Din_A <= ap_const_lv32_0;

    A_EN_A_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            A_EN_A <= ap_const_logic_1;
        else 
            A_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    A_Rst_A <= ap_rst_n_inv;
    A_WEN_A <= ap_const_lv4_0;

    Abuf_address0_assign_proc : process(Abuf_addr_reg_421, ap_CS_fsm_state7, ap_CS_fsm_state4, tmp_9_cast_fu_355_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            Abuf_address0 <= tmp_9_cast_fu_355_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            Abuf_address0 <= Abuf_addr_reg_421;
        else 
            Abuf_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    Abuf_ce0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            Abuf_ce0 <= ap_const_logic_1;
        else 
            Abuf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Abuf_we0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            Abuf_we0 <= ap_const_logic_1;
        else 
            Abuf_we0 <= ap_const_logic_0;
        end if; 
    end process;

    B_Addr_A <= std_logic_vector(shift_left(unsigned(sum_cast_fu_284_p1),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    B_Clk_A <= ap_clk;
    B_Din_A <= ap_const_lv32_0;

    B_EN_A_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            B_EN_A <= ap_const_logic_1;
        else 
            B_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    B_Rst_A <= ap_rst_n_inv;
    B_WEN_A <= ap_const_lv4_0;

    Bbuf_address0_assign_proc : process(Bbuf_addr_reg_426, ap_CS_fsm_state7, ap_CS_fsm_state4, tmp_12_cast_fu_377_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            Bbuf_address0 <= tmp_12_cast_fu_377_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            Bbuf_address0 <= Bbuf_addr_reg_426;
        else 
            Bbuf_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    Bbuf_ce0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            Bbuf_ce0 <= ap_const_logic_1;
        else 
            Bbuf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Bbuf_we0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            Bbuf_we0 <= ap_const_logic_1;
        else 
            Bbuf_we0 <= ap_const_logic_0;
        end if; 
    end process;

    C_Addr_A <= std_logic_vector(shift_left(unsigned(sum6_cast_fu_398_p1),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    C_Clk_A <= ap_clk;
    C_Din_A <= result_reg_179;

    C_EN_A_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            C_EN_A <= ap_const_logic_1;
        else 
            C_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    C_Rst_A <= ap_rst_n_inv;

    C_WEN_A_assign_proc : process(ap_CS_fsm_state7, exitcond_fu_382_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond_fu_382_p2 = ap_const_lv1_1))) then 
            C_WEN_A <= ap_const_lv4_F;
        else 
            C_WEN_A <= ap_const_lv4_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state5, exitcond2_fu_302_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond2_fu_302_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5, exitcond2_fu_302_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond2_fu_302_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    exitcond1_fu_334_p2 <= "1" when (j2_reg_168 = ap_const_lv6_20) else "0";
    exitcond2_fu_302_p2 <= "1" when (i1_reg_157 = ap_const_lv6_20) else "0";
    exitcond3_fu_267_p2 <= "1" when (j_reg_146 = ap_const_lv6_20) else "0";
    exitcond4_fu_224_p2 <= "1" when (i_reg_135 = ap_const_lv6_20) else "0";
    exitcond_fu_382_p2 <= "1" when (k_reg_192 = ap_const_lv6_20) else "0";
    i_1_fu_230_p2 <= std_logic_vector(unsigned(i_reg_135) + unsigned(ap_const_lv6_1));
    i_2_fu_308_p2 <= std_logic_vector(unsigned(i1_reg_157) + unsigned(ap_const_lv6_1));
    j2_cast2_cast_fu_330_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j2_reg_168),12));
    j2_cast3_fu_326_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j2_reg_168),10));
    j_1_fu_273_p2 <= std_logic_vector(unsigned(j_reg_146) + unsigned(ap_const_lv6_1));
    j_2_fu_340_p2 <= std_logic_vector(unsigned(j2_reg_168) + unsigned(ap_const_lv6_1));
    j_cast6_cast_fu_252_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_146),12));
    j_cast7_fu_248_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_146),10));
    k_1_fu_388_p2 <= std_logic_vector(unsigned(k_reg_192) + unsigned(ap_const_lv6_1));
    k_cast1_cast_fu_346_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_reg_192),12));
    sum6_cast_fu_398_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum6_fu_394_p2),32));
    sum6_fu_394_p2 <= std_logic_vector(unsigned(j2_cast3_reg_467) + unsigned(tmp_1_reg_462));
    sum_cast_fu_284_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_fu_279_p2),32));
    sum_fu_279_p2 <= std_logic_vector(unsigned(j_cast7_fu_248_p1) + unsigned(tmp_reg_416));
    tmp_11_cast_fu_368_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_360_p3),12));
    tmp_12_cast_fu_377_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_372_p2),32));
    tmp_1_fu_318_p3 <= (tmp_4_fu_314_p1 & ap_const_lv5_0);
    tmp_2_fu_212_p3 <= (i_reg_135 & ap_const_lv5_0);
    tmp_3_cast_fu_220_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_212_p3),12));
    tmp_3_fu_236_p1 <= i_reg_135(5 - 1 downto 0);
    tmp_4_fu_314_p1 <= i1_reg_157(5 - 1 downto 0);
    tmp_5_fu_290_p3 <= (i1_reg_157 & ap_const_lv5_0);
    tmp_6_cast_fu_298_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_290_p3),12));
    tmp_6_fu_372_p2 <= std_logic_vector(unsigned(j2_cast2_cast_reg_472) + unsigned(tmp_11_cast_fu_368_p1));
    tmp_7_cast_fu_261_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_256_p2),32));
    tmp_7_fu_256_p2 <= std_logic_vector(unsigned(tmp_3_cast_reg_403) + unsigned(j_cast6_cast_fu_252_p1));
    tmp_9_cast_fu_355_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_350_p2),32));
    tmp_9_fu_350_p2 <= std_logic_vector(unsigned(k_cast1_cast_fu_346_p1) + unsigned(tmp_6_cast_reg_449));
    tmp_fu_240_p3 <= (tmp_3_fu_236_p1 & ap_const_lv5_0);
    tmp_s_fu_360_p3 <= (k_reg_192 & ap_const_lv5_0);
end behav;
