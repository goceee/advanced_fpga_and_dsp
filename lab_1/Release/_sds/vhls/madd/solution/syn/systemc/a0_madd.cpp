// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "a0_madd.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic a0_madd::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic a0_madd::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<10> a0_madd::ap_ST_fsm_state1 = "1";
const sc_lv<10> a0_madd::ap_ST_fsm_state2 = "10";
const sc_lv<10> a0_madd::ap_ST_fsm_state3 = "100";
const sc_lv<10> a0_madd::ap_ST_fsm_state4 = "1000";
const sc_lv<10> a0_madd::ap_ST_fsm_state5 = "10000";
const sc_lv<10> a0_madd::ap_ST_fsm_state6 = "100000";
const sc_lv<10> a0_madd::ap_ST_fsm_state7 = "1000000";
const sc_lv<10> a0_madd::ap_ST_fsm_state8 = "10000000";
const sc_lv<10> a0_madd::ap_ST_fsm_state9 = "100000000";
const sc_lv<10> a0_madd::ap_ST_fsm_state10 = "1000000000";
const sc_lv<32> a0_madd::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> a0_madd::ap_const_lv32_1 = "1";
const sc_lv<1> a0_madd::ap_const_lv1_0 = "0";
const sc_lv<32> a0_madd::ap_const_lv32_2 = "10";
const sc_lv<32> a0_madd::ap_const_lv32_3 = "11";
const sc_lv<32> a0_madd::ap_const_lv32_8 = "1000";
const sc_lv<6> a0_madd::ap_const_lv6_0 = "000000";
const sc_lv<1> a0_madd::ap_const_lv1_1 = "1";
const sc_lv<32> a0_madd::ap_const_lv32_9 = "1001";
const sc_lv<4> a0_madd::ap_const_lv4_0 = "0000";
const sc_lv<4> a0_madd::ap_const_lv4_F = "1111";
const sc_lv<32> a0_madd::ap_const_lv32_4 = "100";
const sc_lv<6> a0_madd::ap_const_lv6_20 = "100000";
const sc_lv<6> a0_madd::ap_const_lv6_1 = "1";
const sc_lv<5> a0_madd::ap_const_lv5_0 = "00000";
const bool a0_madd::ap_const_boolean_1 = true;

a0_madd::a0_madd(sc_module_name name) : sc_module(name), mVcdFile(0) {
    madd_fadd_32ns_32bkb_U1 = new a0_madd_fadd_32ns_32bkb<1,5,32,32,32>("madd_fadd_32ns_32bkb_U1");
    madd_fadd_32ns_32bkb_U1->clk(ap_clk);
    madd_fadd_32ns_32bkb_U1->reset(ap_rst_n_inv);
    madd_fadd_32ns_32bkb_U1->din0(A_load_reg_198);
    madd_fadd_32ns_32bkb_U1->din1(B_load_reg_203);
    madd_fadd_32ns_32bkb_U1->ce(ap_var_for_const0);
    madd_fadd_32ns_32bkb_U1->dout(grp_fu_107_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_A_Addr_A);
    sensitive << ( sum_cast_fu_156_p1 );

    SC_METHOD(thread_A_Clk_A);
    sensitive << ( ap_clk );

    SC_METHOD(thread_A_Din_A);

    SC_METHOD(thread_A_EN_A);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_A_Rst_A);
    sensitive << ( ap_rst_n_inv );

    SC_METHOD(thread_A_WEN_A);

    SC_METHOD(thread_B_Addr_A);
    sensitive << ( sum_cast_fu_156_p1 );

    SC_METHOD(thread_B_Clk_A);
    sensitive << ( ap_clk );

    SC_METHOD(thread_B_Din_A);

    SC_METHOD(thread_B_EN_A);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_B_Rst_A);
    sensitive << ( ap_rst_n_inv );

    SC_METHOD(thread_B_WEN_A);

    SC_METHOD(thread_C_Addr_A);
    sensitive << ( sum_cast_reg_183 );

    SC_METHOD(thread_C_Clk_A);
    sensitive << ( ap_clk );

    SC_METHOD(thread_C_Din_A);
    sensitive << ( tmp_3_reg_208 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_C_EN_A);
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_C_Rst_A);
    sensitive << ( ap_rst_n_inv );

    SC_METHOD(thread_C_WEN_A);
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond1_fu_111_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond1_fu_111_p2 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_exitcond1_fu_111_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_reg_85 );

    SC_METHOD(thread_exitcond_fu_139_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( j_reg_96 );

    SC_METHOD(thread_i_1_fu_117_p2);
    sensitive << ( i_reg_85 );

    SC_METHOD(thread_j_1_fu_145_p2);
    sensitive << ( j_reg_96 );

    SC_METHOD(thread_j_cast1_fu_135_p1);
    sensitive << ( j_reg_96 );

    SC_METHOD(thread_sum_cast_fu_156_p1);
    sensitive << ( sum_fu_151_p2 );

    SC_METHOD(thread_sum_fu_151_p2);
    sensitive << ( tmp_reg_170 );
    sensitive << ( j_cast1_fu_135_p1 );

    SC_METHOD(thread_tmp_1_fu_123_p1);
    sensitive << ( i_reg_85 );

    SC_METHOD(thread_tmp_fu_127_p3);
    sensitive << ( tmp_1_fu_123_p1 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond1_fu_111_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond_fu_139_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "0000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "a0_madd_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, A_Addr_A, "(port)A_Addr_A");
    sc_trace(mVcdFile, A_EN_A, "(port)A_EN_A");
    sc_trace(mVcdFile, A_WEN_A, "(port)A_WEN_A");
    sc_trace(mVcdFile, A_Din_A, "(port)A_Din_A");
    sc_trace(mVcdFile, A_Dout_A, "(port)A_Dout_A");
    sc_trace(mVcdFile, A_Clk_A, "(port)A_Clk_A");
    sc_trace(mVcdFile, A_Rst_A, "(port)A_Rst_A");
    sc_trace(mVcdFile, B_Addr_A, "(port)B_Addr_A");
    sc_trace(mVcdFile, B_EN_A, "(port)B_EN_A");
    sc_trace(mVcdFile, B_WEN_A, "(port)B_WEN_A");
    sc_trace(mVcdFile, B_Din_A, "(port)B_Din_A");
    sc_trace(mVcdFile, B_Dout_A, "(port)B_Dout_A");
    sc_trace(mVcdFile, B_Clk_A, "(port)B_Clk_A");
    sc_trace(mVcdFile, B_Rst_A, "(port)B_Rst_A");
    sc_trace(mVcdFile, C_Addr_A, "(port)C_Addr_A");
    sc_trace(mVcdFile, C_EN_A, "(port)C_EN_A");
    sc_trace(mVcdFile, C_WEN_A, "(port)C_WEN_A");
    sc_trace(mVcdFile, C_Din_A, "(port)C_Din_A");
    sc_trace(mVcdFile, C_Dout_A, "(port)C_Dout_A");
    sc_trace(mVcdFile, C_Clk_A, "(port)C_Clk_A");
    sc_trace(mVcdFile, C_Rst_A, "(port)C_Rst_A");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, i_1_fu_117_p2, "i_1_fu_117_p2");
    sc_trace(mVcdFile, i_1_reg_165, "i_1_reg_165");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, tmp_fu_127_p3, "tmp_fu_127_p3");
    sc_trace(mVcdFile, tmp_reg_170, "tmp_reg_170");
    sc_trace(mVcdFile, exitcond1_fu_111_p2, "exitcond1_fu_111_p2");
    sc_trace(mVcdFile, j_1_fu_145_p2, "j_1_fu_145_p2");
    sc_trace(mVcdFile, j_1_reg_178, "j_1_reg_178");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, sum_cast_fu_156_p1, "sum_cast_fu_156_p1");
    sc_trace(mVcdFile, sum_cast_reg_183, "sum_cast_reg_183");
    sc_trace(mVcdFile, exitcond_fu_139_p2, "exitcond_fu_139_p2");
    sc_trace(mVcdFile, A_load_reg_198, "A_load_reg_198");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, B_load_reg_203, "B_load_reg_203");
    sc_trace(mVcdFile, grp_fu_107_p2, "grp_fu_107_p2");
    sc_trace(mVcdFile, tmp_3_reg_208, "tmp_3_reg_208");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, i_reg_85, "i_reg_85");
    sc_trace(mVcdFile, j_reg_96, "j_reg_96");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, tmp_1_fu_123_p1, "tmp_1_fu_123_p1");
    sc_trace(mVcdFile, j_cast1_fu_135_p1, "j_cast1_fu_135_p1");
    sc_trace(mVcdFile, sum_fu_151_p2, "sum_fu_151_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("a0_madd.hdltvin.dat");
    mHdltvoutHandle.open("a0_madd.hdltvout.dat");
}

a0_madd::~a0_madd() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete madd_fadd_32ns_32bkb_U1;
}

void a0_madd::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void a0_madd::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_139_p2.read(), ap_const_lv1_1))) {
        i_reg_85 = i_1_reg_165.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_reg_85 = ap_const_lv6_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond1_fu_111_p2.read(), ap_const_lv1_0))) {
        j_reg_96 = ap_const_lv6_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        j_reg_96 = j_1_reg_178.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        A_load_reg_198 = A_Dout_A.read();
        B_load_reg_203 = B_Dout_A.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_1_reg_165 = i_1_fu_117_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        j_1_reg_178 = j_1_fu_145_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_139_p2.read()))) {
        sum_cast_reg_183 = sum_cast_fu_156_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        tmp_3_reg_208 = grp_fu_107_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond1_fu_111_p2.read(), ap_const_lv1_0))) {
        tmp_reg_170 = tmp_fu_127_p3.read();
    }
}

void a0_madd::thread_A_Addr_A() {
    A_Addr_A = (!ap_const_lv32_2.is_01())? sc_lv<32>(): sum_cast_fu_156_p1.read() << (unsigned short)ap_const_lv32_2.to_uint();
}

void a0_madd::thread_A_Clk_A() {
    A_Clk_A = ap_clk.read()? SC_LOGIC_1 : SC_LOGIC_0;
}

void a0_madd::thread_A_Din_A() {
    A_Din_A = ap_const_lv32_0;
}

void a0_madd::thread_A_EN_A() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        A_EN_A = ap_const_logic_1;
    } else {
        A_EN_A = ap_const_logic_0;
    }
}

void a0_madd::thread_A_Rst_A() {
    A_Rst_A = ap_rst_n_inv.read();
}

void a0_madd::thread_A_WEN_A() {
    A_WEN_A = ap_const_lv4_0;
}

void a0_madd::thread_B_Addr_A() {
    B_Addr_A = (!ap_const_lv32_2.is_01())? sc_lv<32>(): sum_cast_fu_156_p1.read() << (unsigned short)ap_const_lv32_2.to_uint();
}

void a0_madd::thread_B_Clk_A() {
    B_Clk_A = ap_clk.read()? SC_LOGIC_1 : SC_LOGIC_0;
}

void a0_madd::thread_B_Din_A() {
    B_Din_A = ap_const_lv32_0;
}

void a0_madd::thread_B_EN_A() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        B_EN_A = ap_const_logic_1;
    } else {
        B_EN_A = ap_const_logic_0;
    }
}

void a0_madd::thread_B_Rst_A() {
    B_Rst_A = ap_rst_n_inv.read();
}

void a0_madd::thread_B_WEN_A() {
    B_WEN_A = ap_const_lv4_0;
}

void a0_madd::thread_C_Addr_A() {
    C_Addr_A = (!ap_const_lv32_2.is_01())? sc_lv<32>(): sum_cast_reg_183.read() << (unsigned short)ap_const_lv32_2.to_uint();
}

void a0_madd::thread_C_Clk_A() {
    C_Clk_A = ap_clk.read()? SC_LOGIC_1 : SC_LOGIC_0;
}

void a0_madd::thread_C_Din_A() {
    C_Din_A = tmp_3_reg_208.read();
}

void a0_madd::thread_C_EN_A() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        C_EN_A = ap_const_logic_1;
    } else {
        C_EN_A = ap_const_logic_0;
    }
}

void a0_madd::thread_C_Rst_A() {
    C_Rst_A = ap_rst_n_inv.read();
}

void a0_madd::thread_C_WEN_A() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        C_WEN_A = ap_const_lv4_F;
    } else {
        C_WEN_A = ap_const_lv4_0;
    }
}

void a0_madd::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void a0_madd::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void a0_madd::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void a0_madd::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void a0_madd::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void a0_madd::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void a0_madd::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void a0_madd::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond1_fu_111_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void a0_madd::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void a0_madd::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond1_fu_111_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void a0_madd::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void a0_madd::thread_exitcond1_fu_111_p2() {
    exitcond1_fu_111_p2 = (!i_reg_85.read().is_01() || !ap_const_lv6_20.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_85.read() == ap_const_lv6_20);
}

void a0_madd::thread_exitcond_fu_139_p2() {
    exitcond_fu_139_p2 = (!j_reg_96.read().is_01() || !ap_const_lv6_20.is_01())? sc_lv<1>(): sc_lv<1>(j_reg_96.read() == ap_const_lv6_20);
}

void a0_madd::thread_i_1_fu_117_p2() {
    i_1_fu_117_p2 = (!i_reg_85.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(i_reg_85.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void a0_madd::thread_j_1_fu_145_p2() {
    j_1_fu_145_p2 = (!j_reg_96.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(j_reg_96.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void a0_madd::thread_j_cast1_fu_135_p1() {
    j_cast1_fu_135_p1 = esl_zext<10,6>(j_reg_96.read());
}

void a0_madd::thread_sum_cast_fu_156_p1() {
    sum_cast_fu_156_p1 = esl_zext<32,10>(sum_fu_151_p2.read());
}

void a0_madd::thread_sum_fu_151_p2() {
    sum_fu_151_p2 = (!j_cast1_fu_135_p1.read().is_01() || !tmp_reg_170.read().is_01())? sc_lv<10>(): (sc_biguint<10>(j_cast1_fu_135_p1.read()) + sc_biguint<10>(tmp_reg_170.read()));
}

void a0_madd::thread_tmp_1_fu_123_p1() {
    tmp_1_fu_123_p1 = i_reg_85.read().range(5-1, 0);
}

void a0_madd::thread_tmp_fu_127_p3() {
    tmp_fu_127_p3 = esl_concat<5,5>(tmp_1_fu_123_p1.read(), ap_const_lv5_0);
}

void a0_madd::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond1_fu_111_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(exitcond_fu_139_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        default : 
            ap_NS_fsm = "XXXXXXXXXX";
            break;
    }
}

void a0_madd::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"A_Addr_A\" :  \"" << A_Addr_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"A_EN_A\" :  \"" << A_EN_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"A_WEN_A\" :  \"" << A_WEN_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"A_Din_A\" :  \"" << A_Din_A.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"A_Dout_A\" :  \"" << A_Dout_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"A_Clk_A\" :  \"" << A_Clk_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"A_Rst_A\" :  \"" << A_Rst_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"B_Addr_A\" :  \"" << B_Addr_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"B_EN_A\" :  \"" << B_EN_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"B_WEN_A\" :  \"" << B_WEN_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"B_Din_A\" :  \"" << B_Din_A.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"B_Dout_A\" :  \"" << B_Dout_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"B_Clk_A\" :  \"" << B_Clk_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"B_Rst_A\" :  \"" << B_Rst_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"C_Addr_A\" :  \"" << C_Addr_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"C_EN_A\" :  \"" << C_EN_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"C_WEN_A\" :  \"" << C_WEN_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"C_Din_A\" :  \"" << C_Din_A.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"C_Dout_A\" :  \"" << C_Dout_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"C_Clk_A\" :  \"" << C_Clk_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"C_Rst_A\" :  \"" << C_Rst_A.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

