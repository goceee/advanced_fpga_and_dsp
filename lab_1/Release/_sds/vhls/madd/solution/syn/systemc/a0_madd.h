// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _a0_madd_HH_
#define _a0_madd_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "a0_madd_fadd_32ns_32bkb.h"

namespace ap_rtl {

struct a0_madd : public sc_module {
    // Port declarations 27
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<32> > A_Addr_A;
    sc_out< sc_logic > A_EN_A;
    sc_out< sc_lv<4> > A_WEN_A;
    sc_out< sc_lv<32> > A_Din_A;
    sc_in< sc_lv<32> > A_Dout_A;
    sc_out< sc_logic > A_Clk_A;
    sc_out< sc_logic > A_Rst_A;
    sc_out< sc_lv<32> > B_Addr_A;
    sc_out< sc_logic > B_EN_A;
    sc_out< sc_lv<4> > B_WEN_A;
    sc_out< sc_lv<32> > B_Din_A;
    sc_in< sc_lv<32> > B_Dout_A;
    sc_out< sc_logic > B_Clk_A;
    sc_out< sc_logic > B_Rst_A;
    sc_out< sc_lv<32> > C_Addr_A;
    sc_out< sc_logic > C_EN_A;
    sc_out< sc_lv<4> > C_WEN_A;
    sc_out< sc_lv<32> > C_Din_A;
    sc_in< sc_lv<32> > C_Dout_A;
    sc_out< sc_logic > C_Clk_A;
    sc_out< sc_logic > C_Rst_A;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    a0_madd(sc_module_name name);
    SC_HAS_PROCESS(a0_madd);

    ~a0_madd();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    a0_madd_fadd_32ns_32bkb<1,5,32,32,32>* madd_fadd_32ns_32bkb_U1;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_lv<10> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<6> > i_1_fu_117_p2;
    sc_signal< sc_lv<6> > i_1_reg_165;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<10> > tmp_fu_127_p3;
    sc_signal< sc_lv<10> > tmp_reg_170;
    sc_signal< sc_lv<1> > exitcond1_fu_111_p2;
    sc_signal< sc_lv<6> > j_1_fu_145_p2;
    sc_signal< sc_lv<6> > j_1_reg_178;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<32> > sum_cast_fu_156_p1;
    sc_signal< sc_lv<32> > sum_cast_reg_183;
    sc_signal< sc_lv<1> > exitcond_fu_139_p2;
    sc_signal< sc_lv<32> > A_load_reg_198;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<32> > B_load_reg_203;
    sc_signal< sc_lv<32> > grp_fu_107_p2;
    sc_signal< sc_lv<32> > tmp_3_reg_208;
    sc_signal< sc_logic > ap_CS_fsm_state9;
    sc_signal< sc_lv<6> > i_reg_85;
    sc_signal< sc_lv<6> > j_reg_96;
    sc_signal< sc_logic > ap_CS_fsm_state10;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<5> > tmp_1_fu_123_p1;
    sc_signal< sc_lv<10> > j_cast1_fu_135_p1;
    sc_signal< sc_lv<10> > sum_fu_151_p2;
    sc_signal< sc_lv<10> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<10> ap_ST_fsm_state1;
    static const sc_lv<10> ap_ST_fsm_state2;
    static const sc_lv<10> ap_ST_fsm_state3;
    static const sc_lv<10> ap_ST_fsm_state4;
    static const sc_lv<10> ap_ST_fsm_state5;
    static const sc_lv<10> ap_ST_fsm_state6;
    static const sc_lv<10> ap_ST_fsm_state7;
    static const sc_lv<10> ap_ST_fsm_state8;
    static const sc_lv<10> ap_ST_fsm_state9;
    static const sc_lv<10> ap_ST_fsm_state10;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<6> ap_const_lv6_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_9;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<4> ap_const_lv4_F;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<6> ap_const_lv6_20;
    static const sc_lv<6> ap_const_lv6_1;
    static const sc_lv<5> ap_const_lv5_0;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_A_Addr_A();
    void thread_A_Clk_A();
    void thread_A_Din_A();
    void thread_A_EN_A();
    void thread_A_Rst_A();
    void thread_A_WEN_A();
    void thread_B_Addr_A();
    void thread_B_Clk_A();
    void thread_B_Din_A();
    void thread_B_EN_A();
    void thread_B_Rst_A();
    void thread_B_WEN_A();
    void thread_C_Addr_A();
    void thread_C_Clk_A();
    void thread_C_Din_A();
    void thread_C_EN_A();
    void thread_C_Rst_A();
    void thread_C_WEN_A();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state10();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state9();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_exitcond1_fu_111_p2();
    void thread_exitcond_fu_139_p2();
    void thread_i_1_fu_117_p2();
    void thread_j_1_fu_145_p2();
    void thread_j_cast1_fu_135_p1();
    void thread_sum_cast_fu_156_p1();
    void thread_sum_fu_151_p2();
    void thread_tmp_1_fu_123_p1();
    void thread_tmp_fu_127_p3();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
