            .global stereo_vision_sa
             ; DONE: Complete stereo vision function in linear assembly
             ; TODO: Optimise linear assembly. Target: <0.04s, Current: 0.0492s
             ; Ideas:
             ; Balance functional units for both A and B sides.
             ; Draw dependency graph to find areas to fix.
             ; Optimise either the arithmetic part or the data parts.
stereo_vision_sa  .cproc a_1,a_2,a_3,a_4,a_5
				  .reg i, j, k, sum, minimize, distance, width
				  .reg radius_check, sum_check, mult_one, and_one
				  .reg w1, w2, w3, w4, w5, w6, w7, w8, w9, w10
				  .reg w11, w12, w13, w14, w15, w16, w17, w18, w19, w20
				  .reg offsetL1, offsetL2, offsetL3, offsetL4, offsetL5
				  .reg offsetR1, offsetR2, offsetR3, offsetR4, offsetR5
				  .reg maxWidth, maxHeight
				  .reg dotprod1, dotprod2, dotprod3, dotprod4, dotprod5
				  .reg absDiff1, absDiff2, absDiff3, absDiff4, absDiff5
				  .reg index

				  MVKL 276, maxWidth
				  MVKL 219, maxHeight
				  MVKL 0x000000FF, and_one
				  MVKL 280, width
				  MVKL 0x01010101, mult_one
                  MVKH 0x01010101, mult_one
                  ZERO i; Loop variable i
; Begin loop i
loopi
				  ZERO j; Loop variable j
; Begin loop j
loopj
				  ZERO distance;
				  MVKL 0x86A0, minimize;
				  MVKH 1, minimize;

				  ZERO k

				  ADD i, 1, offsetL2
				  ADD i, 2, offsetL3
				  ADD i, 3, offsetL4
				  ADD i, 4, offsetL5
				  MPY i, width, offsetL1
				  MPY width, offsetL2, offsetL2
				  MPY width, offsetL3, offsetL3
				  MPY width, offsetL4, offsetL4
				  MPY width, offsetL5, offsetL5
				  ADD j, offsetL1, offsetL1
				  ADD j, offsetL2, offsetL2
				  ADD j, offsetL3, offsetL3
				  ADD j, offsetL4, offsetL4
				  ADD j, offsetL5, offsetL5

				  LDNDW *a_1(offsetL1), w1:w2
				  LDNDW *a_1(offsetL2), w3:w4
				  LDNDW *a_1(offsetL3), w5:w6
				  LDNDW *a_1(offsetL4), w7:w8
                  LDNDW *a_1(offsetL5), w9:w10
                  AND w1, and_one, w1
                  AND w3, and_one, w3
                  AND w5, and_one, w5
                  AND w7, and_one, w7
                  AND w9, and_one, w9
; Begin loop k
loopk
				  ZERO sum


				  SUB offsetL1, k, offsetR1
				  SUB offsetL2, k, offsetR2
				  SUB offsetL3, k, offsetR3
				  SUB offsetL4, k, offsetR4
				  SUB offsetL5, k, offsetR5

                  LDNDW *a_2(offsetR1), w11:w12
				  LDNDW *a_2(offsetR2), w13:w14
				  LDNDW *a_2(offsetR3), w15:w16
				  LDNDW *a_2(offsetR4), w17:w18
                  LDNDW *a_2(offsetR5), w19:w20
                  AND w11, and_one, w11
                  AND w13, and_one, w13
                  AND w15, and_one, w15
                  AND w17, and_one, w17
                  AND w19, and_one, w19

				  SUB w1, w11, absDiff1
				  SUB w3, w13, absDiff2
				  SUB w5, w15, absDiff3
				  SUB w7, w17, absDiff4
				  SUB w9, w19, absDiff5

				  ABS absDiff1, absDiff1
				  ABS absDiff2, absDiff2
				  ABS absDiff3, absDiff3
				  ABS absDiff4, absDiff4
				  ABS absDiff5, absDiff5

				  SUBABS4 w2, w12, dotprod1
				  SUBABS4 w4, w14, dotprod2
				  SUBABS4 w6, w16, dotprod3
				  SUBABS4 w8, w18, dotprod4
				  SUBABS4 w10, w20, dotprod5

				  DOTPU4 dotprod1, mult_one, dotprod1
				  DOTPU4 dotprod2, mult_one, dotprod2
				  DOTPU4 dotprod3, mult_one, dotprod3
				  DOTPU4 dotprod4, mult_one, dotprod4
				  DOTPU4 dotprod5, mult_one, dotprod5

				  ADD absDiff1, dotprod1, dotprod1
				  ADD absDiff2, dotprod2, dotprod2
				  ADD absDiff3, dotprod3, dotprod3
				  ADD absDiff4, dotprod4, dotprod4
				  ADD absDiff5, dotprod5, dotprod5

				  ADD dotprod1, sum, sum
				  ADD dotprod2, sum, sum
				  ADD dotprod3, sum, sum
				  ADD dotprod4, sum, sum
				  ADD dotprod5, sum, sum

				  CMPLT sum, minimize, sum_check
				  CMPLT j, k, radius_check;
				  XOR radius_check, 1, radius_check
				  AND sum_check, radius_check, radius_check
	 [radius_check]  MV sum, minimize
	 [radius_check]  MV k, distance
				  ;----------------------------------
				  ADD k, 1, k
				  CMPLT k, a_4, radius_check
	  [radius_check]        B loopk
; End loop k
				  ;TODO: Store distance into disparity map
				  ADD i, a_5, index
				  MPY width, index, index
				  ADD j, index, index
				  ADD a_5, index, index
				  STB distance, *a_3[index]

				  ADD j, 1, j
                  CMPLT j, maxWidth, radius_check
      [radius_check]        B loopj
; End loop j
                  ADD i, 1, i
                  CMPLT i, maxHeight, radius_check
      [radius_check]        B loopi
; End loop i
                  .return
                  .endproc
