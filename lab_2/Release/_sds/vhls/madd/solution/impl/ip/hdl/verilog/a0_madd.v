// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="a0_madd,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.256000,HLS_SYN_LAT=7233,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=2,HLS_SYN_FF=334,HLS_SYN_LUT=536,HLS_VERSION=2018_2}" *)

module a0_madd (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        A_dout,
        A_empty_n,
        A_read,
        B_dout,
        B_empty_n,
        B_read,
        C_din,
        C_full_n,
        C_write
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_state8 = 9'd128;
parameter    ap_ST_fsm_state9 = 9'd256;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] A_dout;
input   A_empty_n;
output   A_read;
input  [31:0] B_dout;
input   B_empty_n;
output   B_read;
output  [31:0] C_din;
input   C_full_n;
output   C_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg A_read;
reg B_read;
reg C_write;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    A_blk_n;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond_fu_97_p2;
reg    B_blk_n;
reg    C_blk_n;
wire    ap_CS_fsm_state9;
wire   [5:0] i_1_fu_91_p2;
reg   [5:0] i_1_reg_112;
wire    ap_CS_fsm_state2;
wire   [5:0] j_1_fu_103_p2;
reg   [5:0] j_1_reg_120;
reg    ap_block_state3;
reg   [31:0] A_read_reg_125;
reg   [31:0] B_read_reg_130;
wire   [31:0] grp_fu_81_p2;
reg   [31:0] tmp_3_reg_135;
wire    ap_CS_fsm_state8;
reg   [5:0] i_reg_59;
reg   [5:0] j_reg_70;
wire   [0:0] exitcond1_fu_85_p2;
wire    ap_CS_fsm_state4;
reg   [8:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
end

a0_madd_fadd_32ns_32bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
madd_fadd_32ns_32bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(A_read_reg_125),
    .din1(B_read_reg_130),
    .ce(1'b1),
    .dout(grp_fu_81_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((exitcond_fu_97_p2 == 1'd0) & (1'b0 == B_empty_n)) | ((exitcond_fu_97_p2 == 1'd0) & (1'b0 == A_empty_n))) & (exitcond_fu_97_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_reg_59 <= i_1_reg_112;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_59 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_85_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_reg_70 <= 6'd0;
    end else if (((1'b1 == C_full_n) & (1'b1 == ap_CS_fsm_state9))) begin
        j_reg_70 <= j_1_reg_120;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((exitcond_fu_97_p2 == 1'd0) & (1'b0 == B_empty_n)) | ((exitcond_fu_97_p2 == 1'd0) & (1'b0 == A_empty_n))) & (exitcond_fu_97_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        A_read_reg_125 <= A_dout;
        B_read_reg_130 <= B_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_1_reg_112 <= i_1_fu_91_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((exitcond_fu_97_p2 == 1'd0) & (1'b0 == B_empty_n)) | ((exitcond_fu_97_p2 == 1'd0) & (1'b0 == A_empty_n))) & (1'b1 == ap_CS_fsm_state3))) begin
        j_1_reg_120 <= j_1_fu_103_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp_3_reg_135 <= grp_fu_81_p2;
    end
end

always @ (*) begin
    if (((exitcond_fu_97_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        A_blk_n = A_empty_n;
    end else begin
        A_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((exitcond_fu_97_p2 == 1'd0) & (1'b0 == B_empty_n)) | ((exitcond_fu_97_p2 == 1'd0) & (1'b0 == A_empty_n))) & (exitcond_fu_97_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        A_read = 1'b1;
    end else begin
        A_read = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_97_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        B_blk_n = B_empty_n;
    end else begin
        B_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((exitcond_fu_97_p2 == 1'd0) & (1'b0 == B_empty_n)) | ((exitcond_fu_97_p2 == 1'd0) & (1'b0 == A_empty_n))) & (exitcond_fu_97_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        B_read = 1'b1;
    end else begin
        B_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        C_blk_n = C_full_n;
    end else begin
        C_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == C_full_n) & (1'b1 == ap_CS_fsm_state9))) begin
        C_write = 1'b1;
    end else begin
        C_write = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_85_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_85_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond1_fu_85_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((~(((exitcond_fu_97_p2 == 1'd0) & (1'b0 == B_empty_n)) | ((exitcond_fu_97_p2 == 1'd0) & (1'b0 == A_empty_n))) & (exitcond_fu_97_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if ((~(((exitcond_fu_97_p2 == 1'd0) & (1'b0 == B_empty_n)) | ((exitcond_fu_97_p2 == 1'd0) & (1'b0 == A_empty_n))) & (exitcond_fu_97_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == C_full_n) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign C_din = tmp_3_reg_135;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state3 = (((exitcond_fu_97_p2 == 1'd0) & (1'b0 == B_empty_n)) | ((exitcond_fu_97_p2 == 1'd0) & (1'b0 == A_empty_n)));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign exitcond1_fu_85_p2 = ((i_reg_59 == 6'd32) ? 1'b1 : 1'b0);

assign exitcond_fu_97_p2 = ((j_reg_70 == 6'd32) ? 1'b1 : 1'b0);

assign i_1_fu_91_p2 = (i_reg_59 + 6'd1);

assign j_1_fu_103_p2 = (j_reg_70 + 6'd1);

endmodule //a0_madd
