// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _a0_madd_HH_
#define _a0_madd_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "a0_madd_fadd_32ns_32bkb.h"

namespace ap_rtl {

struct a0_madd : public sc_module {
    // Port declarations 15
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > A_dout;
    sc_in< sc_logic > A_empty_n;
    sc_out< sc_logic > A_read;
    sc_in< sc_lv<32> > B_dout;
    sc_in< sc_logic > B_empty_n;
    sc_out< sc_logic > B_read;
    sc_out< sc_lv<32> > C_din;
    sc_in< sc_logic > C_full_n;
    sc_out< sc_logic > C_write;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    a0_madd(sc_module_name name);
    SC_HAS_PROCESS(a0_madd);

    ~a0_madd();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    a0_madd_fadd_32ns_32bkb<1,5,32,32,32>* madd_fadd_32ns_32bkb_U1;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_lv<9> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > A_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<1> > exitcond_fu_97_p2;
    sc_signal< sc_logic > B_blk_n;
    sc_signal< sc_logic > C_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state9;
    sc_signal< sc_lv<6> > i_1_fu_91_p2;
    sc_signal< sc_lv<6> > i_1_reg_112;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<6> > j_1_fu_103_p2;
    sc_signal< sc_lv<6> > j_1_reg_120;
    sc_signal< bool > ap_block_state3;
    sc_signal< sc_lv<32> > A_read_reg_125;
    sc_signal< sc_lv<32> > B_read_reg_130;
    sc_signal< sc_lv<32> > grp_fu_81_p2;
    sc_signal< sc_lv<32> > tmp_3_reg_135;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< sc_lv<6> > i_reg_59;
    sc_signal< sc_lv<6> > j_reg_70;
    sc_signal< sc_lv<1> > exitcond1_fu_85_p2;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<9> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<9> ap_ST_fsm_state1;
    static const sc_lv<9> ap_ST_fsm_state2;
    static const sc_lv<9> ap_ST_fsm_state3;
    static const sc_lv<9> ap_ST_fsm_state4;
    static const sc_lv<9> ap_ST_fsm_state5;
    static const sc_lv<9> ap_ST_fsm_state6;
    static const sc_lv<9> ap_ST_fsm_state7;
    static const sc_lv<9> ap_ST_fsm_state8;
    static const sc_lv<9> ap_ST_fsm_state9;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<6> ap_const_lv6_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<6> ap_const_lv6_20;
    static const sc_lv<6> ap_const_lv6_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_A_blk_n();
    void thread_A_read();
    void thread_B_blk_n();
    void thread_B_read();
    void thread_C_blk_n();
    void thread_C_din();
    void thread_C_write();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state8();
    void thread_ap_CS_fsm_state9();
    void thread_ap_block_state3();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_exitcond1_fu_85_p2();
    void thread_exitcond_fu_97_p2();
    void thread_i_1_fu_91_p2();
    void thread_j_1_fu_103_p2();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
