// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "a0_madd.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic a0_madd::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic a0_madd::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<9> a0_madd::ap_ST_fsm_state1 = "1";
const sc_lv<9> a0_madd::ap_ST_fsm_state2 = "10";
const sc_lv<9> a0_madd::ap_ST_fsm_state3 = "100";
const sc_lv<9> a0_madd::ap_ST_fsm_state4 = "1000";
const sc_lv<9> a0_madd::ap_ST_fsm_state5 = "10000";
const sc_lv<9> a0_madd::ap_ST_fsm_state6 = "100000";
const sc_lv<9> a0_madd::ap_ST_fsm_state7 = "1000000";
const sc_lv<9> a0_madd::ap_ST_fsm_state8 = "10000000";
const sc_lv<9> a0_madd::ap_ST_fsm_state9 = "100000000";
const sc_lv<32> a0_madd::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> a0_madd::ap_const_lv32_2 = "10";
const sc_lv<1> a0_madd::ap_const_lv1_0 = "0";
const sc_lv<32> a0_madd::ap_const_lv32_8 = "1000";
const sc_lv<32> a0_madd::ap_const_lv32_1 = "1";
const sc_lv<32> a0_madd::ap_const_lv32_7 = "111";
const sc_lv<6> a0_madd::ap_const_lv6_0 = "000000";
const sc_lv<1> a0_madd::ap_const_lv1_1 = "1";
const sc_lv<32> a0_madd::ap_const_lv32_3 = "11";
const sc_lv<6> a0_madd::ap_const_lv6_20 = "100000";
const sc_lv<6> a0_madd::ap_const_lv6_1 = "1";
const bool a0_madd::ap_const_boolean_1 = true;

a0_madd::a0_madd(sc_module_name name) : sc_module(name), mVcdFile(0) {
    madd_fadd_32ns_32bkb_U1 = new a0_madd_fadd_32ns_32bkb<1,5,32,32,32>("madd_fadd_32ns_32bkb_U1");
    madd_fadd_32ns_32bkb_U1->clk(ap_clk);
    madd_fadd_32ns_32bkb_U1->reset(ap_rst_n_inv);
    madd_fadd_32ns_32bkb_U1->din0(A_read_reg_125);
    madd_fadd_32ns_32bkb_U1->din1(B_read_reg_130);
    madd_fadd_32ns_32bkb_U1->ce(ap_var_for_const0);
    madd_fadd_32ns_32bkb_U1->dout(grp_fu_81_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_A_blk_n);
    sensitive << ( A_empty_n );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond_fu_97_p2 );

    SC_METHOD(thread_A_read);
    sensitive << ( A_empty_n );
    sensitive << ( B_empty_n );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond_fu_97_p2 );

    SC_METHOD(thread_B_blk_n);
    sensitive << ( B_empty_n );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond_fu_97_p2 );

    SC_METHOD(thread_B_read);
    sensitive << ( A_empty_n );
    sensitive << ( B_empty_n );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond_fu_97_p2 );

    SC_METHOD(thread_C_blk_n);
    sensitive << ( C_full_n );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_C_din);
    sensitive << ( C_full_n );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( tmp_3_reg_135 );

    SC_METHOD(thread_C_write);
    sensitive << ( C_full_n );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state3);
    sensitive << ( A_empty_n );
    sensitive << ( B_empty_n );
    sensitive << ( exitcond_fu_97_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond1_fu_85_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond1_fu_85_p2 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_exitcond1_fu_85_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_reg_59 );

    SC_METHOD(thread_exitcond_fu_97_p2);
    sensitive << ( A_empty_n );
    sensitive << ( B_empty_n );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond_fu_97_p2 );
    sensitive << ( j_reg_70 );

    SC_METHOD(thread_i_1_fu_91_p2);
    sensitive << ( i_reg_59 );

    SC_METHOD(thread_j_1_fu_103_p2);
    sensitive << ( j_reg_70 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( A_empty_n );
    sensitive << ( B_empty_n );
    sensitive << ( C_full_n );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond_fu_97_p2 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond1_fu_85_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "a0_madd_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, A_dout, "(port)A_dout");
    sc_trace(mVcdFile, A_empty_n, "(port)A_empty_n");
    sc_trace(mVcdFile, A_read, "(port)A_read");
    sc_trace(mVcdFile, B_dout, "(port)B_dout");
    sc_trace(mVcdFile, B_empty_n, "(port)B_empty_n");
    sc_trace(mVcdFile, B_read, "(port)B_read");
    sc_trace(mVcdFile, C_din, "(port)C_din");
    sc_trace(mVcdFile, C_full_n, "(port)C_full_n");
    sc_trace(mVcdFile, C_write, "(port)C_write");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, A_blk_n, "A_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, exitcond_fu_97_p2, "exitcond_fu_97_p2");
    sc_trace(mVcdFile, B_blk_n, "B_blk_n");
    sc_trace(mVcdFile, C_blk_n, "C_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, i_1_fu_91_p2, "i_1_fu_91_p2");
    sc_trace(mVcdFile, i_1_reg_112, "i_1_reg_112");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, j_1_fu_103_p2, "j_1_fu_103_p2");
    sc_trace(mVcdFile, j_1_reg_120, "j_1_reg_120");
    sc_trace(mVcdFile, ap_block_state3, "ap_block_state3");
    sc_trace(mVcdFile, A_read_reg_125, "A_read_reg_125");
    sc_trace(mVcdFile, B_read_reg_130, "B_read_reg_130");
    sc_trace(mVcdFile, grp_fu_81_p2, "grp_fu_81_p2");
    sc_trace(mVcdFile, tmp_3_reg_135, "tmp_3_reg_135");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, i_reg_59, "i_reg_59");
    sc_trace(mVcdFile, j_reg_70, "j_reg_70");
    sc_trace(mVcdFile, exitcond1_fu_85_p2, "exitcond1_fu_85_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("a0_madd.hdltvin.dat");
    mHdltvoutHandle.open("a0_madd.hdltvout.dat");
}

a0_madd::~a0_madd() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete madd_fadd_32ns_32bkb_U1;
}

void a0_madd::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void a0_madd::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((!((esl_seteq<1,1,1>(exitcond_fu_97_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, B_empty_n.read())) || (esl_seteq<1,1,1>(exitcond_fu_97_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, A_empty_n.read()))) && 
         esl_seteq<1,1,1>(exitcond_fu_97_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        i_reg_59 = i_1_reg_112.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_reg_59 = ap_const_lv6_0;
    }
    if ((esl_seteq<1,1,1>(exitcond1_fu_85_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        j_reg_70 = ap_const_lv6_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, C_full_n.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        j_reg_70 = j_1_reg_120.read();
    }
    if ((!((esl_seteq<1,1,1>(exitcond_fu_97_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, B_empty_n.read())) || (esl_seteq<1,1,1>(exitcond_fu_97_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, A_empty_n.read()))) && esl_seteq<1,1,1>(exitcond_fu_97_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        A_read_reg_125 = A_dout.read();
        B_read_reg_130 = B_dout.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_1_reg_112 = i_1_fu_91_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && !((esl_seteq<1,1,1>(exitcond_fu_97_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, B_empty_n.read())) || (esl_seteq<1,1,1>(exitcond_fu_97_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, A_empty_n.read()))))) {
        j_1_reg_120 = j_1_fu_103_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        tmp_3_reg_135 = grp_fu_81_p2.read();
    }
}

void a0_madd::thread_A_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_97_p2.read(), ap_const_lv1_0))) {
        A_blk_n = A_empty_n.read();
    } else {
        A_blk_n = ap_const_logic_1;
    }
}

void a0_madd::thread_A_read() {
    if ((!((esl_seteq<1,1,1>(exitcond_fu_97_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, B_empty_n.read())) || (esl_seteq<1,1,1>(exitcond_fu_97_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, A_empty_n.read()))) && 
         esl_seteq<1,1,1>(exitcond_fu_97_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        A_read = ap_const_logic_1;
    } else {
        A_read = ap_const_logic_0;
    }
}

void a0_madd::thread_B_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_97_p2.read(), ap_const_lv1_0))) {
        B_blk_n = B_empty_n.read();
    } else {
        B_blk_n = ap_const_logic_1;
    }
}

void a0_madd::thread_B_read() {
    if ((!((esl_seteq<1,1,1>(exitcond_fu_97_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, B_empty_n.read())) || (esl_seteq<1,1,1>(exitcond_fu_97_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, A_empty_n.read()))) && 
         esl_seteq<1,1,1>(exitcond_fu_97_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        B_read = ap_const_logic_1;
    } else {
        B_read = ap_const_logic_0;
    }
}

void a0_madd::thread_C_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        C_blk_n = C_full_n.read();
    } else {
        C_blk_n = ap_const_logic_1;
    }
}

void a0_madd::thread_C_din() {
    C_din = tmp_3_reg_135.read();
}

void a0_madd::thread_C_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, C_full_n.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        C_write = ap_const_logic_1;
    } else {
        C_write = ap_const_logic_0;
    }
}

void a0_madd::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void a0_madd::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void a0_madd::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void a0_madd::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void a0_madd::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void a0_madd::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void a0_madd::thread_ap_block_state3() {
    ap_block_state3 = ((esl_seteq<1,1,1>(exitcond_fu_97_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, B_empty_n.read())) || (esl_seteq<1,1,1>(exitcond_fu_97_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, A_empty_n.read())));
}

void a0_madd::thread_ap_done() {
    if ((esl_seteq<1,1,1>(exitcond1_fu_85_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void a0_madd::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void a0_madd::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(exitcond1_fu_85_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void a0_madd::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void a0_madd::thread_exitcond1_fu_85_p2() {
    exitcond1_fu_85_p2 = (!i_reg_59.read().is_01() || !ap_const_lv6_20.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_59.read() == ap_const_lv6_20);
}

void a0_madd::thread_exitcond_fu_97_p2() {
    exitcond_fu_97_p2 = (!j_reg_70.read().is_01() || !ap_const_lv6_20.is_01())? sc_lv<1>(): sc_lv<1>(j_reg_70.read() == ap_const_lv6_20);
}

void a0_madd::thread_i_1_fu_91_p2() {
    i_1_fu_91_p2 = (!i_reg_59.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(i_reg_59.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void a0_madd::thread_j_1_fu_103_p2() {
    j_1_fu_103_p2 = (!j_reg_70.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(j_reg_70.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void a0_madd::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(exitcond1_fu_85_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((!((esl_seteq<1,1,1>(exitcond_fu_97_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, B_empty_n.read())) || (esl_seteq<1,1,1>(exitcond_fu_97_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, A_empty_n.read()))) && esl_seteq<1,1,1>(exitcond_fu_97_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else if ((!((esl_seteq<1,1,1>(exitcond_fu_97_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, B_empty_n.read())) || (esl_seteq<1,1,1>(exitcond_fu_97_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, A_empty_n.read()))) && esl_seteq<1,1,1>(exitcond_fu_97_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, C_full_n.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state9;
            }
            break;
        default : 
            ap_NS_fsm = "XXXXXXXXX";
            break;
    }
}

void a0_madd::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"A_dout\" :  \"" << A_dout.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"A_empty_n\" :  \"" << A_empty_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"A_read\" :  \"" << A_read.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"B_dout\" :  \"" << B_dout.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"B_empty_n\" :  \"" << B_empty_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"B_read\" :  \"" << B_read.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"C_din\" :  \"" << C_din.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"C_full_n\" :  \"" << C_full_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"C_write\" :  \"" << C_write.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

