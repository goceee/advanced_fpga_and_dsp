-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity a0_block_mmult is
generic (
    C_M_AXI_A_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_A_ID_WIDTH : INTEGER := 1;
    C_M_AXI_A_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_A_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_A_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_A_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_A_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_A_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_B_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_B_ID_WIDTH : INTEGER := 1;
    C_M_AXI_B_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_B_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_B_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_B_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_B_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_B_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_C_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_C_ID_WIDTH : INTEGER := 1;
    C_M_AXI_C_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_C_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_C_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_C_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_C_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_C_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_A_USER_VALUE : INTEGER := 0;
    C_M_AXI_A_PROT_VALUE : INTEGER := 0;
    C_M_AXI_A_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_B_USER_VALUE : INTEGER := 0;
    C_M_AXI_B_PROT_VALUE : INTEGER := 0;
    C_M_AXI_B_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_C_USER_VALUE : INTEGER := 0;
    C_M_AXI_C_PROT_VALUE : INTEGER := 0;
    C_M_AXI_C_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_A_AWVALID : OUT STD_LOGIC;
    m_axi_A_AWREADY : IN STD_LOGIC;
    m_axi_A_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_A_ADDR_WIDTH-1 downto 0);
    m_axi_A_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_A_ID_WIDTH-1 downto 0);
    m_axi_A_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_A_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_A_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_A_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_A_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_A_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_A_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_A_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_A_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_A_AWUSER_WIDTH-1 downto 0);
    m_axi_A_WVALID : OUT STD_LOGIC;
    m_axi_A_WREADY : IN STD_LOGIC;
    m_axi_A_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_A_DATA_WIDTH-1 downto 0);
    m_axi_A_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_A_DATA_WIDTH/8-1 downto 0);
    m_axi_A_WLAST : OUT STD_LOGIC;
    m_axi_A_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_A_ID_WIDTH-1 downto 0);
    m_axi_A_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_A_WUSER_WIDTH-1 downto 0);
    m_axi_A_ARVALID : OUT STD_LOGIC;
    m_axi_A_ARREADY : IN STD_LOGIC;
    m_axi_A_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_A_ADDR_WIDTH-1 downto 0);
    m_axi_A_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_A_ID_WIDTH-1 downto 0);
    m_axi_A_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_A_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_A_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_A_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_A_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_A_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_A_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_A_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_A_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_A_ARUSER_WIDTH-1 downto 0);
    m_axi_A_RVALID : IN STD_LOGIC;
    m_axi_A_RREADY : OUT STD_LOGIC;
    m_axi_A_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_A_DATA_WIDTH-1 downto 0);
    m_axi_A_RLAST : IN STD_LOGIC;
    m_axi_A_RID : IN STD_LOGIC_VECTOR (C_M_AXI_A_ID_WIDTH-1 downto 0);
    m_axi_A_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_A_RUSER_WIDTH-1 downto 0);
    m_axi_A_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_A_BVALID : IN STD_LOGIC;
    m_axi_A_BREADY : OUT STD_LOGIC;
    m_axi_A_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_A_BID : IN STD_LOGIC_VECTOR (C_M_AXI_A_ID_WIDTH-1 downto 0);
    m_axi_A_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_A_BUSER_WIDTH-1 downto 0);
    m_axi_B_AWVALID : OUT STD_LOGIC;
    m_axi_B_AWREADY : IN STD_LOGIC;
    m_axi_B_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_B_ADDR_WIDTH-1 downto 0);
    m_axi_B_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_B_ID_WIDTH-1 downto 0);
    m_axi_B_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_B_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_B_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_B_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_B_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_B_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_B_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_B_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_B_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_B_AWUSER_WIDTH-1 downto 0);
    m_axi_B_WVALID : OUT STD_LOGIC;
    m_axi_B_WREADY : IN STD_LOGIC;
    m_axi_B_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_B_DATA_WIDTH-1 downto 0);
    m_axi_B_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_B_DATA_WIDTH/8-1 downto 0);
    m_axi_B_WLAST : OUT STD_LOGIC;
    m_axi_B_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_B_ID_WIDTH-1 downto 0);
    m_axi_B_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_B_WUSER_WIDTH-1 downto 0);
    m_axi_B_ARVALID : OUT STD_LOGIC;
    m_axi_B_ARREADY : IN STD_LOGIC;
    m_axi_B_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_B_ADDR_WIDTH-1 downto 0);
    m_axi_B_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_B_ID_WIDTH-1 downto 0);
    m_axi_B_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_B_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_B_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_B_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_B_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_B_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_B_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_B_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_B_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_B_ARUSER_WIDTH-1 downto 0);
    m_axi_B_RVALID : IN STD_LOGIC;
    m_axi_B_RREADY : OUT STD_LOGIC;
    m_axi_B_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_B_DATA_WIDTH-1 downto 0);
    m_axi_B_RLAST : IN STD_LOGIC;
    m_axi_B_RID : IN STD_LOGIC_VECTOR (C_M_AXI_B_ID_WIDTH-1 downto 0);
    m_axi_B_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_B_RUSER_WIDTH-1 downto 0);
    m_axi_B_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_B_BVALID : IN STD_LOGIC;
    m_axi_B_BREADY : OUT STD_LOGIC;
    m_axi_B_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_B_BID : IN STD_LOGIC_VECTOR (C_M_AXI_B_ID_WIDTH-1 downto 0);
    m_axi_B_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_B_BUSER_WIDTH-1 downto 0);
    m_axi_C_AWVALID : OUT STD_LOGIC;
    m_axi_C_AWREADY : IN STD_LOGIC;
    m_axi_C_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_C_ADDR_WIDTH-1 downto 0);
    m_axi_C_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_C_ID_WIDTH-1 downto 0);
    m_axi_C_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_C_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_C_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_C_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_C_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_C_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_C_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_C_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_C_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_C_AWUSER_WIDTH-1 downto 0);
    m_axi_C_WVALID : OUT STD_LOGIC;
    m_axi_C_WREADY : IN STD_LOGIC;
    m_axi_C_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_C_DATA_WIDTH-1 downto 0);
    m_axi_C_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_C_DATA_WIDTH/8-1 downto 0);
    m_axi_C_WLAST : OUT STD_LOGIC;
    m_axi_C_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_C_ID_WIDTH-1 downto 0);
    m_axi_C_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_C_WUSER_WIDTH-1 downto 0);
    m_axi_C_ARVALID : OUT STD_LOGIC;
    m_axi_C_ARREADY : IN STD_LOGIC;
    m_axi_C_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_C_ADDR_WIDTH-1 downto 0);
    m_axi_C_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_C_ID_WIDTH-1 downto 0);
    m_axi_C_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_C_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_C_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_C_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_C_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_C_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_C_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_C_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_C_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_C_ARUSER_WIDTH-1 downto 0);
    m_axi_C_RVALID : IN STD_LOGIC;
    m_axi_C_RREADY : OUT STD_LOGIC;
    m_axi_C_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_C_DATA_WIDTH-1 downto 0);
    m_axi_C_RLAST : IN STD_LOGIC;
    m_axi_C_RID : IN STD_LOGIC_VECTOR (C_M_AXI_C_ID_WIDTH-1 downto 0);
    m_axi_C_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_C_RUSER_WIDTH-1 downto 0);
    m_axi_C_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_C_BVALID : IN STD_LOGIC;
    m_axi_C_BREADY : OUT STD_LOGIC;
    m_axi_C_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_C_BID : IN STD_LOGIC_VECTOR (C_M_AXI_C_ID_WIDTH-1 downto 0);
    m_axi_C_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_C_BUSER_WIDTH-1 downto 0);
    A_offset : IN STD_LOGIC_VECTOR (31 downto 0);
    B_offset : IN STD_LOGIC_VECTOR (31 downto 0);
    C_offset : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of a0_block_mmult is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "a0_block_mmult,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=220512449,HLS_SYN_TPT=none,HLS_SYN_MEM=136,HLS_SYN_DSP=160,HLS_SYN_FF=20897,HLS_SYN_LUT=28904,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_E : STD_LOGIC_VECTOR (4 downto 0) := "01110";
    constant ap_const_lv5_D : STD_LOGIC_VECTOR (4 downto 0) := "01101";
    constant ap_const_lv5_C : STD_LOGIC_VECTOR (4 downto 0) := "01100";
    constant ap_const_lv5_B : STD_LOGIC_VECTOR (4 downto 0) := "01011";
    constant ap_const_lv5_A : STD_LOGIC_VECTOR (4 downto 0) := "01010";
    constant ap_const_lv5_9 : STD_LOGIC_VECTOR (4 downto 0) := "01001";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv5_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_const_lv5_6 : STD_LOGIC_VECTOR (4 downto 0) := "00110";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv17_10000 : STD_LOGIC_VECTOR (16 downto 0) := "10000000000000000";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv11_400 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal B_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp_7_reg_802 : STD_LOGIC_VECTOR (0 downto 0);
    signal B_blk_n_R : STD_LOGIC;
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal A_AWREADY : STD_LOGIC;
    signal A_WREADY : STD_LOGIC;
    signal A_ARVALID : STD_LOGIC;
    signal A_ARREADY : STD_LOGIC;
    signal A_RVALID : STD_LOGIC;
    signal A_RREADY : STD_LOGIC;
    signal A_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal A_RLAST : STD_LOGIC;
    signal A_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal A_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal A_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal A_BVALID : STD_LOGIC;
    signal A_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal A_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal A_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal B_AWREADY : STD_LOGIC;
    signal B_WREADY : STD_LOGIC;
    signal B_ARVALID : STD_LOGIC;
    signal B_ARREADY : STD_LOGIC;
    signal B_RVALID : STD_LOGIC;
    signal B_RREADY : STD_LOGIC;
    signal B_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal B_RLAST : STD_LOGIC;
    signal B_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal B_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal B_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal B_BVALID : STD_LOGIC;
    signal B_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal B_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal B_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal C_AWVALID : STD_LOGIC;
    signal C_AWREADY : STD_LOGIC;
    signal C_WVALID : STD_LOGIC;
    signal C_WREADY : STD_LOGIC;
    signal C_ARREADY : STD_LOGIC;
    signal C_RVALID : STD_LOGIC;
    signal C_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal C_RLAST : STD_LOGIC;
    signal C_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal C_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal C_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal C_BVALID : STD_LOGIC;
    signal C_BREADY : STD_LOGIC;
    signal C_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal C_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal C_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_reg_437 : STD_LOGIC_VECTOR (16 downto 0);
    signal i_reg_448 : STD_LOGIC_VECTOR (10 downto 0);
    signal j_reg_459 : STD_LOGIC_VECTOR (6 downto 0);
    signal C_offset5_reg_751 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_15_cast_fu_529_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_15_cast_reg_756 : STD_LOGIC_VECTOR (30 downto 0);
    signal A_offset1_reg_761 : STD_LOGIC_VECTOR (29 downto 0);
    signal exitcond3_fu_543_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal k_2_fu_549_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal k_2_reg_770 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_1_fu_555_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_reg_775 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond_flatten_fu_572_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_782 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_sig_ioackin_B_ARREADY : STD_LOGIC;
    signal ap_block_state4_io : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal indvar_flatten_next_fu_578_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal i_cast6_mid2_v_fu_604_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_cast6_mid2_v_reg_791 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_cast6_mid2_v_reg_791_pp0_iter1_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal i_cast6_mid2_v_reg_791_pp0_iter2_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal i_cast6_mid2_v_reg_791_pp0_iter3_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal i_cast6_mid2_v_reg_791_pp0_iter4_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal i_cast6_mid2_v_reg_791_pp0_iter5_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal i_cast6_mid2_v_reg_791_pp0_iter6_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal i_cast6_mid2_v_reg_791_pp0_iter7_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal i_cast6_mid2_v_reg_791_pp0_iter8_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal B4_sum7_fu_637_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal B4_sum7_reg_797 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_7_fu_654_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal arrayNo_cast_reg_806 : STD_LOGIC_VECTOR (4 downto 0);
    signal arrayNo_cast_reg_806_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal arrayNo_cast_reg_806_pp0_iter2_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal arrayNo_cast_reg_806_pp0_iter3_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal arrayNo_cast_reg_806_pp0_iter4_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal arrayNo_cast_reg_806_pp0_iter5_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal arrayNo_cast_reg_806_pp0_iter6_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal arrayNo_cast_reg_806_pp0_iter7_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal arrayNo_cast_reg_806_pp0_iter8_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_10_fu_670_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_10_reg_810 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_10_reg_810_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_10_reg_810_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_10_reg_810_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_10_reg_810_pp0_iter4_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_10_reg_810_pp0_iter5_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_10_reg_810_pp0_iter6_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_10_reg_810_pp0_iter7_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_10_reg_810_pp0_iter8_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal j_1_fu_674_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal B_addr_read_reg_826 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_1_fu_722_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_1_reg_849 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal tmp_s_fu_732_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_s_reg_854 : STD_LOGIC_VECTOR (19 downto 0);
    signal exitcond_fu_716_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum6_fu_741_p4 : STD_LOGIC_VECTOR (19 downto 0);
    signal sum6_reg_859 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal b_0_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal b_0_ce0 : STD_LOGIC;
    signal b_0_we0 : STD_LOGIC;
    signal b_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_0_ce1 : STD_LOGIC;
    signal b_0_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_1_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal b_1_ce0 : STD_LOGIC;
    signal b_1_we0 : STD_LOGIC;
    signal b_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_1_ce1 : STD_LOGIC;
    signal b_1_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_2_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal b_2_ce0 : STD_LOGIC;
    signal b_2_we0 : STD_LOGIC;
    signal b_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_2_ce1 : STD_LOGIC;
    signal b_2_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_3_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal b_3_ce0 : STD_LOGIC;
    signal b_3_we0 : STD_LOGIC;
    signal b_3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_3_ce1 : STD_LOGIC;
    signal b_3_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_4_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal b_4_ce0 : STD_LOGIC;
    signal b_4_we0 : STD_LOGIC;
    signal b_4_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_4_ce1 : STD_LOGIC;
    signal b_4_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_5_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal b_5_ce0 : STD_LOGIC;
    signal b_5_we0 : STD_LOGIC;
    signal b_5_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_5_ce1 : STD_LOGIC;
    signal b_5_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_6_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal b_6_ce0 : STD_LOGIC;
    signal b_6_we0 : STD_LOGIC;
    signal b_6_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_6_ce1 : STD_LOGIC;
    signal b_6_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_7_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal b_7_ce0 : STD_LOGIC;
    signal b_7_we0 : STD_LOGIC;
    signal b_7_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_7_ce1 : STD_LOGIC;
    signal b_7_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_8_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal b_8_ce0 : STD_LOGIC;
    signal b_8_we0 : STD_LOGIC;
    signal b_8_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_8_ce1 : STD_LOGIC;
    signal b_8_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_9_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal b_9_ce0 : STD_LOGIC;
    signal b_9_we0 : STD_LOGIC;
    signal b_9_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_9_ce1 : STD_LOGIC;
    signal b_9_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_10_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal b_10_ce0 : STD_LOGIC;
    signal b_10_we0 : STD_LOGIC;
    signal b_10_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_10_ce1 : STD_LOGIC;
    signal b_10_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_11_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal b_11_ce0 : STD_LOGIC;
    signal b_11_we0 : STD_LOGIC;
    signal b_11_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_11_ce1 : STD_LOGIC;
    signal b_11_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_12_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal b_12_ce0 : STD_LOGIC;
    signal b_12_we0 : STD_LOGIC;
    signal b_12_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_12_ce1 : STD_LOGIC;
    signal b_12_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_13_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal b_13_ce0 : STD_LOGIC;
    signal b_13_we0 : STD_LOGIC;
    signal b_13_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_13_ce1 : STD_LOGIC;
    signal b_13_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_14_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal b_14_ce0 : STD_LOGIC;
    signal b_14_we0 : STD_LOGIC;
    signal b_14_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_14_ce1 : STD_LOGIC;
    signal b_14_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_15_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal b_15_ce0 : STD_LOGIC;
    signal b_15_we0 : STD_LOGIC;
    signal b_15_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_15_ce1 : STD_LOGIC;
    signal b_15_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_matxvec_fu_481_ap_start : STD_LOGIC;
    signal grp_matxvec_fu_481_ap_done : STD_LOGIC;
    signal grp_matxvec_fu_481_ap_idle : STD_LOGIC;
    signal grp_matxvec_fu_481_ap_ready : STD_LOGIC;
    signal grp_matxvec_fu_481_m_axi_A_AWVALID : STD_LOGIC;
    signal grp_matxvec_fu_481_m_axi_A_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_matxvec_fu_481_m_axi_A_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_matxvec_fu_481_m_axi_A_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_matxvec_fu_481_m_axi_A_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_matxvec_fu_481_m_axi_A_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_matxvec_fu_481_m_axi_A_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_matxvec_fu_481_m_axi_A_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_matxvec_fu_481_m_axi_A_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_matxvec_fu_481_m_axi_A_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_matxvec_fu_481_m_axi_A_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_matxvec_fu_481_m_axi_A_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_matxvec_fu_481_m_axi_A_WVALID : STD_LOGIC;
    signal grp_matxvec_fu_481_m_axi_A_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_matxvec_fu_481_m_axi_A_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_matxvec_fu_481_m_axi_A_WLAST : STD_LOGIC;
    signal grp_matxvec_fu_481_m_axi_A_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_matxvec_fu_481_m_axi_A_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_matxvec_fu_481_m_axi_A_ARVALID : STD_LOGIC;
    signal grp_matxvec_fu_481_m_axi_A_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_matxvec_fu_481_m_axi_A_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_matxvec_fu_481_m_axi_A_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_matxvec_fu_481_m_axi_A_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_matxvec_fu_481_m_axi_A_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_matxvec_fu_481_m_axi_A_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_matxvec_fu_481_m_axi_A_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_matxvec_fu_481_m_axi_A_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_matxvec_fu_481_m_axi_A_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_matxvec_fu_481_m_axi_A_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_matxvec_fu_481_m_axi_A_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_matxvec_fu_481_m_axi_A_RREADY : STD_LOGIC;
    signal grp_matxvec_fu_481_m_axi_A_BREADY : STD_LOGIC;
    signal grp_matxvec_fu_481_B_0_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_matxvec_fu_481_B_0_ce0 : STD_LOGIC;
    signal grp_matxvec_fu_481_B_0_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_matxvec_fu_481_B_0_ce1 : STD_LOGIC;
    signal grp_matxvec_fu_481_B_1_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_matxvec_fu_481_B_1_ce0 : STD_LOGIC;
    signal grp_matxvec_fu_481_B_1_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_matxvec_fu_481_B_1_ce1 : STD_LOGIC;
    signal grp_matxvec_fu_481_B_2_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_matxvec_fu_481_B_2_ce0 : STD_LOGIC;
    signal grp_matxvec_fu_481_B_2_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_matxvec_fu_481_B_2_ce1 : STD_LOGIC;
    signal grp_matxvec_fu_481_B_3_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_matxvec_fu_481_B_3_ce0 : STD_LOGIC;
    signal grp_matxvec_fu_481_B_3_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_matxvec_fu_481_B_3_ce1 : STD_LOGIC;
    signal grp_matxvec_fu_481_B_4_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_matxvec_fu_481_B_4_ce0 : STD_LOGIC;
    signal grp_matxvec_fu_481_B_4_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_matxvec_fu_481_B_4_ce1 : STD_LOGIC;
    signal grp_matxvec_fu_481_B_5_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_matxvec_fu_481_B_5_ce0 : STD_LOGIC;
    signal grp_matxvec_fu_481_B_5_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_matxvec_fu_481_B_5_ce1 : STD_LOGIC;
    signal grp_matxvec_fu_481_B_6_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_matxvec_fu_481_B_6_ce0 : STD_LOGIC;
    signal grp_matxvec_fu_481_B_6_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_matxvec_fu_481_B_6_ce1 : STD_LOGIC;
    signal grp_matxvec_fu_481_B_7_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_matxvec_fu_481_B_7_ce0 : STD_LOGIC;
    signal grp_matxvec_fu_481_B_7_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_matxvec_fu_481_B_7_ce1 : STD_LOGIC;
    signal grp_matxvec_fu_481_B_8_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_matxvec_fu_481_B_8_ce0 : STD_LOGIC;
    signal grp_matxvec_fu_481_B_8_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_matxvec_fu_481_B_8_ce1 : STD_LOGIC;
    signal grp_matxvec_fu_481_B_9_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_matxvec_fu_481_B_9_ce0 : STD_LOGIC;
    signal grp_matxvec_fu_481_B_9_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_matxvec_fu_481_B_9_ce1 : STD_LOGIC;
    signal grp_matxvec_fu_481_B_10_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_matxvec_fu_481_B_10_ce0 : STD_LOGIC;
    signal grp_matxvec_fu_481_B_10_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_matxvec_fu_481_B_10_ce1 : STD_LOGIC;
    signal grp_matxvec_fu_481_B_11_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_matxvec_fu_481_B_11_ce0 : STD_LOGIC;
    signal grp_matxvec_fu_481_B_11_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_matxvec_fu_481_B_11_ce1 : STD_LOGIC;
    signal grp_matxvec_fu_481_B_12_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_matxvec_fu_481_B_12_ce0 : STD_LOGIC;
    signal grp_matxvec_fu_481_B_12_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_matxvec_fu_481_B_12_ce1 : STD_LOGIC;
    signal grp_matxvec_fu_481_B_13_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_matxvec_fu_481_B_13_ce0 : STD_LOGIC;
    signal grp_matxvec_fu_481_B_13_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_matxvec_fu_481_B_13_ce1 : STD_LOGIC;
    signal grp_matxvec_fu_481_B_14_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_matxvec_fu_481_B_14_ce0 : STD_LOGIC;
    signal grp_matxvec_fu_481_B_14_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_matxvec_fu_481_B_14_ce1 : STD_LOGIC;
    signal grp_matxvec_fu_481_B_15_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_matxvec_fu_481_B_15_ce0 : STD_LOGIC;
    signal grp_matxvec_fu_481_B_15_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_matxvec_fu_481_B_15_ce1 : STD_LOGIC;
    signal grp_matxvec_fu_481_m_axi_C_AWVALID : STD_LOGIC;
    signal grp_matxvec_fu_481_m_axi_C_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_matxvec_fu_481_m_axi_C_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_matxvec_fu_481_m_axi_C_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_matxvec_fu_481_m_axi_C_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_matxvec_fu_481_m_axi_C_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_matxvec_fu_481_m_axi_C_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_matxvec_fu_481_m_axi_C_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_matxvec_fu_481_m_axi_C_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_matxvec_fu_481_m_axi_C_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_matxvec_fu_481_m_axi_C_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_matxvec_fu_481_m_axi_C_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_matxvec_fu_481_m_axi_C_WVALID : STD_LOGIC;
    signal grp_matxvec_fu_481_m_axi_C_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_matxvec_fu_481_m_axi_C_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_matxvec_fu_481_m_axi_C_WLAST : STD_LOGIC;
    signal grp_matxvec_fu_481_m_axi_C_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_matxvec_fu_481_m_axi_C_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_matxvec_fu_481_m_axi_C_ARVALID : STD_LOGIC;
    signal grp_matxvec_fu_481_m_axi_C_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_matxvec_fu_481_m_axi_C_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_matxvec_fu_481_m_axi_C_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_matxvec_fu_481_m_axi_C_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_matxvec_fu_481_m_axi_C_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_matxvec_fu_481_m_axi_C_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_matxvec_fu_481_m_axi_C_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_matxvec_fu_481_m_axi_C_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_matxvec_fu_481_m_axi_C_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_matxvec_fu_481_m_axi_C_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_matxvec_fu_481_m_axi_C_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_matxvec_fu_481_m_axi_C_RREADY : STD_LOGIC;
    signal grp_matxvec_fu_481_m_axi_C_BREADY : STD_LOGIC;
    signal k_reg_426 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_mux_i_phi_fu_452_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_reg_470 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal grp_matxvec_fu_481_ap_start_reg : STD_LOGIC := '0';
    signal tmp_12_fu_696_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal B4_sum7_cast_fu_680_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ioackin_B_ARREADY : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_fu_519_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_2_fu_559_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond1_fu_590_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_584_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_3_fu_612_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_9_mid1_fu_616_p4 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_9_fu_563_p4 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_4_fu_625_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_10_mid2_cast_fu_633_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_5_fu_642_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_6_fu_646_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal j_mid2_fu_596_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_11_fu_690_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_13_fu_728_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_1296 : BOOLEAN;

    component a0_matxvec IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_A_AWVALID : OUT STD_LOGIC;
        m_axi_A_AWREADY : IN STD_LOGIC;
        m_axi_A_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_A_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_A_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_A_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_A_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_A_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_A_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_A_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_A_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_A_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_A_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_A_WVALID : OUT STD_LOGIC;
        m_axi_A_WREADY : IN STD_LOGIC;
        m_axi_A_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_A_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_A_WLAST : OUT STD_LOGIC;
        m_axi_A_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_A_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_A_ARVALID : OUT STD_LOGIC;
        m_axi_A_ARREADY : IN STD_LOGIC;
        m_axi_A_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_A_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_A_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_A_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_A_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_A_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_A_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_A_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_A_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_A_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_A_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_A_RVALID : IN STD_LOGIC;
        m_axi_A_RREADY : OUT STD_LOGIC;
        m_axi_A_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_A_RLAST : IN STD_LOGIC;
        m_axi_A_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_A_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_A_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_A_BVALID : IN STD_LOGIC;
        m_axi_A_BREADY : OUT STD_LOGIC;
        m_axi_A_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_A_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_A_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        A_offset : IN STD_LOGIC_VECTOR (29 downto 0);
        A_offset1 : IN STD_LOGIC_VECTOR (19 downto 0);
        B_0_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        B_0_ce0 : OUT STD_LOGIC;
        B_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        B_0_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        B_0_ce1 : OUT STD_LOGIC;
        B_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        B_1_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        B_1_ce0 : OUT STD_LOGIC;
        B_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        B_1_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        B_1_ce1 : OUT STD_LOGIC;
        B_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        B_2_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        B_2_ce0 : OUT STD_LOGIC;
        B_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        B_2_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        B_2_ce1 : OUT STD_LOGIC;
        B_2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        B_3_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        B_3_ce0 : OUT STD_LOGIC;
        B_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        B_3_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        B_3_ce1 : OUT STD_LOGIC;
        B_3_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        B_4_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        B_4_ce0 : OUT STD_LOGIC;
        B_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        B_4_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        B_4_ce1 : OUT STD_LOGIC;
        B_4_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        B_5_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        B_5_ce0 : OUT STD_LOGIC;
        B_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        B_5_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        B_5_ce1 : OUT STD_LOGIC;
        B_5_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        B_6_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        B_6_ce0 : OUT STD_LOGIC;
        B_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        B_6_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        B_6_ce1 : OUT STD_LOGIC;
        B_6_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        B_7_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        B_7_ce0 : OUT STD_LOGIC;
        B_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        B_7_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        B_7_ce1 : OUT STD_LOGIC;
        B_7_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        B_8_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        B_8_ce0 : OUT STD_LOGIC;
        B_8_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        B_8_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        B_8_ce1 : OUT STD_LOGIC;
        B_8_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        B_9_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        B_9_ce0 : OUT STD_LOGIC;
        B_9_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        B_9_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        B_9_ce1 : OUT STD_LOGIC;
        B_9_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        B_10_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        B_10_ce0 : OUT STD_LOGIC;
        B_10_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        B_10_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        B_10_ce1 : OUT STD_LOGIC;
        B_10_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        B_11_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        B_11_ce0 : OUT STD_LOGIC;
        B_11_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        B_11_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        B_11_ce1 : OUT STD_LOGIC;
        B_11_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        B_12_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        B_12_ce0 : OUT STD_LOGIC;
        B_12_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        B_12_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        B_12_ce1 : OUT STD_LOGIC;
        B_12_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        B_13_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        B_13_ce0 : OUT STD_LOGIC;
        B_13_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        B_13_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        B_13_ce1 : OUT STD_LOGIC;
        B_13_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        B_14_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        B_14_ce0 : OUT STD_LOGIC;
        B_14_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        B_14_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        B_14_ce1 : OUT STD_LOGIC;
        B_14_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        B_15_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        B_15_ce0 : OUT STD_LOGIC;
        B_15_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        B_15_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        B_15_ce1 : OUT STD_LOGIC;
        B_15_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_C_AWVALID : OUT STD_LOGIC;
        m_axi_C_AWREADY : IN STD_LOGIC;
        m_axi_C_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_C_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_C_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_C_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_C_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_C_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_C_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_C_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_C_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_C_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_C_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_C_WVALID : OUT STD_LOGIC;
        m_axi_C_WREADY : IN STD_LOGIC;
        m_axi_C_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_C_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_C_WLAST : OUT STD_LOGIC;
        m_axi_C_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_C_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_C_ARVALID : OUT STD_LOGIC;
        m_axi_C_ARREADY : IN STD_LOGIC;
        m_axi_C_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_C_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_C_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_C_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_C_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_C_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_C_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_C_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_C_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_C_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_C_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_C_RVALID : IN STD_LOGIC;
        m_axi_C_RREADY : OUT STD_LOGIC;
        m_axi_C_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_C_RLAST : IN STD_LOGIC;
        m_axi_C_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_C_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_C_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_C_BVALID : IN STD_LOGIC;
        m_axi_C_BREADY : OUT STD_LOGIC;
        m_axi_C_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_C_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_C_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        C_offset : IN STD_LOGIC_VECTOR (29 downto 0);
        C_offset2 : IN STD_LOGIC_VECTOR (19 downto 0) );
    end component;


    component a0_block_mmult_b_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component a0_block_mmult_A_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component a0_block_mmult_B_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component a0_block_mmult_C_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    block_mmult_A_m_axi_U : component a0_block_mmult_A_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_A_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_A_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_A_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_A_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_A_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_A_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_A_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_A_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_A_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_A_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_A_CACHE_VALUE)
    port map (
        AWVALID => m_axi_A_AWVALID,
        AWREADY => m_axi_A_AWREADY,
        AWADDR => m_axi_A_AWADDR,
        AWID => m_axi_A_AWID,
        AWLEN => m_axi_A_AWLEN,
        AWSIZE => m_axi_A_AWSIZE,
        AWBURST => m_axi_A_AWBURST,
        AWLOCK => m_axi_A_AWLOCK,
        AWCACHE => m_axi_A_AWCACHE,
        AWPROT => m_axi_A_AWPROT,
        AWQOS => m_axi_A_AWQOS,
        AWREGION => m_axi_A_AWREGION,
        AWUSER => m_axi_A_AWUSER,
        WVALID => m_axi_A_WVALID,
        WREADY => m_axi_A_WREADY,
        WDATA => m_axi_A_WDATA,
        WSTRB => m_axi_A_WSTRB,
        WLAST => m_axi_A_WLAST,
        WID => m_axi_A_WID,
        WUSER => m_axi_A_WUSER,
        ARVALID => m_axi_A_ARVALID,
        ARREADY => m_axi_A_ARREADY,
        ARADDR => m_axi_A_ARADDR,
        ARID => m_axi_A_ARID,
        ARLEN => m_axi_A_ARLEN,
        ARSIZE => m_axi_A_ARSIZE,
        ARBURST => m_axi_A_ARBURST,
        ARLOCK => m_axi_A_ARLOCK,
        ARCACHE => m_axi_A_ARCACHE,
        ARPROT => m_axi_A_ARPROT,
        ARQOS => m_axi_A_ARQOS,
        ARREGION => m_axi_A_ARREGION,
        ARUSER => m_axi_A_ARUSER,
        RVALID => m_axi_A_RVALID,
        RREADY => m_axi_A_RREADY,
        RDATA => m_axi_A_RDATA,
        RLAST => m_axi_A_RLAST,
        RID => m_axi_A_RID,
        RUSER => m_axi_A_RUSER,
        RRESP => m_axi_A_RRESP,
        BVALID => m_axi_A_BVALID,
        BREADY => m_axi_A_BREADY,
        BRESP => m_axi_A_BRESP,
        BID => m_axi_A_BID,
        BUSER => m_axi_A_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => A_ARVALID,
        I_ARREADY => A_ARREADY,
        I_ARADDR => grp_matxvec_fu_481_m_axi_A_ARADDR,
        I_ARID => grp_matxvec_fu_481_m_axi_A_ARID,
        I_ARLEN => grp_matxvec_fu_481_m_axi_A_ARLEN,
        I_ARSIZE => grp_matxvec_fu_481_m_axi_A_ARSIZE,
        I_ARLOCK => grp_matxvec_fu_481_m_axi_A_ARLOCK,
        I_ARCACHE => grp_matxvec_fu_481_m_axi_A_ARCACHE,
        I_ARQOS => grp_matxvec_fu_481_m_axi_A_ARQOS,
        I_ARPROT => grp_matxvec_fu_481_m_axi_A_ARPROT,
        I_ARUSER => grp_matxvec_fu_481_m_axi_A_ARUSER,
        I_ARBURST => grp_matxvec_fu_481_m_axi_A_ARBURST,
        I_ARREGION => grp_matxvec_fu_481_m_axi_A_ARREGION,
        I_RVALID => A_RVALID,
        I_RREADY => A_RREADY,
        I_RDATA => A_RDATA,
        I_RID => A_RID,
        I_RUSER => A_RUSER,
        I_RRESP => A_RRESP,
        I_RLAST => A_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => A_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => A_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => A_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => A_BRESP,
        I_BID => A_BID,
        I_BUSER => A_BUSER);

    block_mmult_B_m_axi_U : component a0_block_mmult_B_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_B_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_B_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_B_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_B_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_B_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_B_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_B_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_B_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_B_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_B_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_B_CACHE_VALUE)
    port map (
        AWVALID => m_axi_B_AWVALID,
        AWREADY => m_axi_B_AWREADY,
        AWADDR => m_axi_B_AWADDR,
        AWID => m_axi_B_AWID,
        AWLEN => m_axi_B_AWLEN,
        AWSIZE => m_axi_B_AWSIZE,
        AWBURST => m_axi_B_AWBURST,
        AWLOCK => m_axi_B_AWLOCK,
        AWCACHE => m_axi_B_AWCACHE,
        AWPROT => m_axi_B_AWPROT,
        AWQOS => m_axi_B_AWQOS,
        AWREGION => m_axi_B_AWREGION,
        AWUSER => m_axi_B_AWUSER,
        WVALID => m_axi_B_WVALID,
        WREADY => m_axi_B_WREADY,
        WDATA => m_axi_B_WDATA,
        WSTRB => m_axi_B_WSTRB,
        WLAST => m_axi_B_WLAST,
        WID => m_axi_B_WID,
        WUSER => m_axi_B_WUSER,
        ARVALID => m_axi_B_ARVALID,
        ARREADY => m_axi_B_ARREADY,
        ARADDR => m_axi_B_ARADDR,
        ARID => m_axi_B_ARID,
        ARLEN => m_axi_B_ARLEN,
        ARSIZE => m_axi_B_ARSIZE,
        ARBURST => m_axi_B_ARBURST,
        ARLOCK => m_axi_B_ARLOCK,
        ARCACHE => m_axi_B_ARCACHE,
        ARPROT => m_axi_B_ARPROT,
        ARQOS => m_axi_B_ARQOS,
        ARREGION => m_axi_B_ARREGION,
        ARUSER => m_axi_B_ARUSER,
        RVALID => m_axi_B_RVALID,
        RREADY => m_axi_B_RREADY,
        RDATA => m_axi_B_RDATA,
        RLAST => m_axi_B_RLAST,
        RID => m_axi_B_RID,
        RUSER => m_axi_B_RUSER,
        RRESP => m_axi_B_RRESP,
        BVALID => m_axi_B_BVALID,
        BREADY => m_axi_B_BREADY,
        BRESP => m_axi_B_BRESP,
        BID => m_axi_B_BID,
        BUSER => m_axi_B_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => B_ARVALID,
        I_ARREADY => B_ARREADY,
        I_ARADDR => B4_sum7_cast_fu_680_p1,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_40,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => B_RVALID,
        I_RREADY => B_RREADY,
        I_RDATA => B_RDATA,
        I_RID => B_RID,
        I_RUSER => B_RUSER,
        I_RRESP => B_RRESP,
        I_RLAST => B_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => B_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => B_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => B_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => B_BRESP,
        I_BID => B_BID,
        I_BUSER => B_BUSER);

    block_mmult_C_m_axi_U : component a0_block_mmult_C_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_C_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_C_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_C_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_C_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_C_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_C_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_C_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_C_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_C_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_C_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_C_CACHE_VALUE)
    port map (
        AWVALID => m_axi_C_AWVALID,
        AWREADY => m_axi_C_AWREADY,
        AWADDR => m_axi_C_AWADDR,
        AWID => m_axi_C_AWID,
        AWLEN => m_axi_C_AWLEN,
        AWSIZE => m_axi_C_AWSIZE,
        AWBURST => m_axi_C_AWBURST,
        AWLOCK => m_axi_C_AWLOCK,
        AWCACHE => m_axi_C_AWCACHE,
        AWPROT => m_axi_C_AWPROT,
        AWQOS => m_axi_C_AWQOS,
        AWREGION => m_axi_C_AWREGION,
        AWUSER => m_axi_C_AWUSER,
        WVALID => m_axi_C_WVALID,
        WREADY => m_axi_C_WREADY,
        WDATA => m_axi_C_WDATA,
        WSTRB => m_axi_C_WSTRB,
        WLAST => m_axi_C_WLAST,
        WID => m_axi_C_WID,
        WUSER => m_axi_C_WUSER,
        ARVALID => m_axi_C_ARVALID,
        ARREADY => m_axi_C_ARREADY,
        ARADDR => m_axi_C_ARADDR,
        ARID => m_axi_C_ARID,
        ARLEN => m_axi_C_ARLEN,
        ARSIZE => m_axi_C_ARSIZE,
        ARBURST => m_axi_C_ARBURST,
        ARLOCK => m_axi_C_ARLOCK,
        ARCACHE => m_axi_C_ARCACHE,
        ARPROT => m_axi_C_ARPROT,
        ARQOS => m_axi_C_ARQOS,
        ARREGION => m_axi_C_ARREGION,
        ARUSER => m_axi_C_ARUSER,
        RVALID => m_axi_C_RVALID,
        RREADY => m_axi_C_RREADY,
        RDATA => m_axi_C_RDATA,
        RLAST => m_axi_C_RLAST,
        RID => m_axi_C_RID,
        RUSER => m_axi_C_RUSER,
        RRESP => m_axi_C_RRESP,
        BVALID => m_axi_C_BVALID,
        BREADY => m_axi_C_BREADY,
        BRESP => m_axi_C_BRESP,
        BID => m_axi_C_BID,
        BUSER => m_axi_C_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => C_ARREADY,
        I_ARADDR => ap_const_lv32_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => C_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => C_RDATA,
        I_RID => C_RID,
        I_RUSER => C_RUSER,
        I_RRESP => C_RRESP,
        I_RLAST => C_RLAST,
        I_AWVALID => C_AWVALID,
        I_AWREADY => C_AWREADY,
        I_AWADDR => grp_matxvec_fu_481_m_axi_C_AWADDR,
        I_AWID => grp_matxvec_fu_481_m_axi_C_AWID,
        I_AWLEN => grp_matxvec_fu_481_m_axi_C_AWLEN,
        I_AWSIZE => grp_matxvec_fu_481_m_axi_C_AWSIZE,
        I_AWLOCK => grp_matxvec_fu_481_m_axi_C_AWLOCK,
        I_AWCACHE => grp_matxvec_fu_481_m_axi_C_AWCACHE,
        I_AWQOS => grp_matxvec_fu_481_m_axi_C_AWQOS,
        I_AWPROT => grp_matxvec_fu_481_m_axi_C_AWPROT,
        I_AWUSER => grp_matxvec_fu_481_m_axi_C_AWUSER,
        I_AWBURST => grp_matxvec_fu_481_m_axi_C_AWBURST,
        I_AWREGION => grp_matxvec_fu_481_m_axi_C_AWREGION,
        I_WVALID => C_WVALID,
        I_WREADY => C_WREADY,
        I_WDATA => grp_matxvec_fu_481_m_axi_C_WDATA,
        I_WID => grp_matxvec_fu_481_m_axi_C_WID,
        I_WUSER => grp_matxvec_fu_481_m_axi_C_WUSER,
        I_WLAST => grp_matxvec_fu_481_m_axi_C_WLAST,
        I_WSTRB => grp_matxvec_fu_481_m_axi_C_WSTRB,
        I_BVALID => C_BVALID,
        I_BREADY => C_BREADY,
        I_BRESP => C_BRESP,
        I_BID => C_BID,
        I_BUSER => C_BUSER);

    b_0_U : component a0_block_mmult_b_0
    generic map (
        DataWidth => 32,
        AddressRange => 4096,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => b_0_address0,
        ce0 => b_0_ce0,
        we0 => b_0_we0,
        d0 => B_addr_read_reg_826,
        q0 => b_0_q0,
        address1 => grp_matxvec_fu_481_B_0_address1,
        ce1 => b_0_ce1,
        q1 => b_0_q1);

    b_1_U : component a0_block_mmult_b_0
    generic map (
        DataWidth => 32,
        AddressRange => 4096,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => b_1_address0,
        ce0 => b_1_ce0,
        we0 => b_1_we0,
        d0 => B_addr_read_reg_826,
        q0 => b_1_q0,
        address1 => grp_matxvec_fu_481_B_1_address1,
        ce1 => b_1_ce1,
        q1 => b_1_q1);

    b_2_U : component a0_block_mmult_b_0
    generic map (
        DataWidth => 32,
        AddressRange => 4096,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => b_2_address0,
        ce0 => b_2_ce0,
        we0 => b_2_we0,
        d0 => B_addr_read_reg_826,
        q0 => b_2_q0,
        address1 => grp_matxvec_fu_481_B_2_address1,
        ce1 => b_2_ce1,
        q1 => b_2_q1);

    b_3_U : component a0_block_mmult_b_0
    generic map (
        DataWidth => 32,
        AddressRange => 4096,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => b_3_address0,
        ce0 => b_3_ce0,
        we0 => b_3_we0,
        d0 => B_addr_read_reg_826,
        q0 => b_3_q0,
        address1 => grp_matxvec_fu_481_B_3_address1,
        ce1 => b_3_ce1,
        q1 => b_3_q1);

    b_4_U : component a0_block_mmult_b_0
    generic map (
        DataWidth => 32,
        AddressRange => 4096,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => b_4_address0,
        ce0 => b_4_ce0,
        we0 => b_4_we0,
        d0 => B_addr_read_reg_826,
        q0 => b_4_q0,
        address1 => grp_matxvec_fu_481_B_4_address1,
        ce1 => b_4_ce1,
        q1 => b_4_q1);

    b_5_U : component a0_block_mmult_b_0
    generic map (
        DataWidth => 32,
        AddressRange => 4096,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => b_5_address0,
        ce0 => b_5_ce0,
        we0 => b_5_we0,
        d0 => B_addr_read_reg_826,
        q0 => b_5_q0,
        address1 => grp_matxvec_fu_481_B_5_address1,
        ce1 => b_5_ce1,
        q1 => b_5_q1);

    b_6_U : component a0_block_mmult_b_0
    generic map (
        DataWidth => 32,
        AddressRange => 4096,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => b_6_address0,
        ce0 => b_6_ce0,
        we0 => b_6_we0,
        d0 => B_addr_read_reg_826,
        q0 => b_6_q0,
        address1 => grp_matxvec_fu_481_B_6_address1,
        ce1 => b_6_ce1,
        q1 => b_6_q1);

    b_7_U : component a0_block_mmult_b_0
    generic map (
        DataWidth => 32,
        AddressRange => 4096,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => b_7_address0,
        ce0 => b_7_ce0,
        we0 => b_7_we0,
        d0 => B_addr_read_reg_826,
        q0 => b_7_q0,
        address1 => grp_matxvec_fu_481_B_7_address1,
        ce1 => b_7_ce1,
        q1 => b_7_q1);

    b_8_U : component a0_block_mmult_b_0
    generic map (
        DataWidth => 32,
        AddressRange => 4096,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => b_8_address0,
        ce0 => b_8_ce0,
        we0 => b_8_we0,
        d0 => B_addr_read_reg_826,
        q0 => b_8_q0,
        address1 => grp_matxvec_fu_481_B_8_address1,
        ce1 => b_8_ce1,
        q1 => b_8_q1);

    b_9_U : component a0_block_mmult_b_0
    generic map (
        DataWidth => 32,
        AddressRange => 4096,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => b_9_address0,
        ce0 => b_9_ce0,
        we0 => b_9_we0,
        d0 => B_addr_read_reg_826,
        q0 => b_9_q0,
        address1 => grp_matxvec_fu_481_B_9_address1,
        ce1 => b_9_ce1,
        q1 => b_9_q1);

    b_10_U : component a0_block_mmult_b_0
    generic map (
        DataWidth => 32,
        AddressRange => 4096,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => b_10_address0,
        ce0 => b_10_ce0,
        we0 => b_10_we0,
        d0 => B_addr_read_reg_826,
        q0 => b_10_q0,
        address1 => grp_matxvec_fu_481_B_10_address1,
        ce1 => b_10_ce1,
        q1 => b_10_q1);

    b_11_U : component a0_block_mmult_b_0
    generic map (
        DataWidth => 32,
        AddressRange => 4096,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => b_11_address0,
        ce0 => b_11_ce0,
        we0 => b_11_we0,
        d0 => B_addr_read_reg_826,
        q0 => b_11_q0,
        address1 => grp_matxvec_fu_481_B_11_address1,
        ce1 => b_11_ce1,
        q1 => b_11_q1);

    b_12_U : component a0_block_mmult_b_0
    generic map (
        DataWidth => 32,
        AddressRange => 4096,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => b_12_address0,
        ce0 => b_12_ce0,
        we0 => b_12_we0,
        d0 => B_addr_read_reg_826,
        q0 => b_12_q0,
        address1 => grp_matxvec_fu_481_B_12_address1,
        ce1 => b_12_ce1,
        q1 => b_12_q1);

    b_13_U : component a0_block_mmult_b_0
    generic map (
        DataWidth => 32,
        AddressRange => 4096,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => b_13_address0,
        ce0 => b_13_ce0,
        we0 => b_13_we0,
        d0 => B_addr_read_reg_826,
        q0 => b_13_q0,
        address1 => grp_matxvec_fu_481_B_13_address1,
        ce1 => b_13_ce1,
        q1 => b_13_q1);

    b_14_U : component a0_block_mmult_b_0
    generic map (
        DataWidth => 32,
        AddressRange => 4096,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => b_14_address0,
        ce0 => b_14_ce0,
        we0 => b_14_we0,
        d0 => B_addr_read_reg_826,
        q0 => b_14_q0,
        address1 => grp_matxvec_fu_481_B_14_address1,
        ce1 => b_14_ce1,
        q1 => b_14_q1);

    b_15_U : component a0_block_mmult_b_0
    generic map (
        DataWidth => 32,
        AddressRange => 4096,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => b_15_address0,
        ce0 => b_15_ce0,
        we0 => b_15_we0,
        d0 => B_addr_read_reg_826,
        q0 => b_15_q0,
        address1 => grp_matxvec_fu_481_B_15_address1,
        ce1 => b_15_ce1,
        q1 => b_15_q1);

    grp_matxvec_fu_481 : component a0_matxvec
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_matxvec_fu_481_ap_start,
        ap_done => grp_matxvec_fu_481_ap_done,
        ap_idle => grp_matxvec_fu_481_ap_idle,
        ap_ready => grp_matxvec_fu_481_ap_ready,
        m_axi_A_AWVALID => grp_matxvec_fu_481_m_axi_A_AWVALID,
        m_axi_A_AWREADY => ap_const_logic_0,
        m_axi_A_AWADDR => grp_matxvec_fu_481_m_axi_A_AWADDR,
        m_axi_A_AWID => grp_matxvec_fu_481_m_axi_A_AWID,
        m_axi_A_AWLEN => grp_matxvec_fu_481_m_axi_A_AWLEN,
        m_axi_A_AWSIZE => grp_matxvec_fu_481_m_axi_A_AWSIZE,
        m_axi_A_AWBURST => grp_matxvec_fu_481_m_axi_A_AWBURST,
        m_axi_A_AWLOCK => grp_matxvec_fu_481_m_axi_A_AWLOCK,
        m_axi_A_AWCACHE => grp_matxvec_fu_481_m_axi_A_AWCACHE,
        m_axi_A_AWPROT => grp_matxvec_fu_481_m_axi_A_AWPROT,
        m_axi_A_AWQOS => grp_matxvec_fu_481_m_axi_A_AWQOS,
        m_axi_A_AWREGION => grp_matxvec_fu_481_m_axi_A_AWREGION,
        m_axi_A_AWUSER => grp_matxvec_fu_481_m_axi_A_AWUSER,
        m_axi_A_WVALID => grp_matxvec_fu_481_m_axi_A_WVALID,
        m_axi_A_WREADY => ap_const_logic_0,
        m_axi_A_WDATA => grp_matxvec_fu_481_m_axi_A_WDATA,
        m_axi_A_WSTRB => grp_matxvec_fu_481_m_axi_A_WSTRB,
        m_axi_A_WLAST => grp_matxvec_fu_481_m_axi_A_WLAST,
        m_axi_A_WID => grp_matxvec_fu_481_m_axi_A_WID,
        m_axi_A_WUSER => grp_matxvec_fu_481_m_axi_A_WUSER,
        m_axi_A_ARVALID => grp_matxvec_fu_481_m_axi_A_ARVALID,
        m_axi_A_ARREADY => A_ARREADY,
        m_axi_A_ARADDR => grp_matxvec_fu_481_m_axi_A_ARADDR,
        m_axi_A_ARID => grp_matxvec_fu_481_m_axi_A_ARID,
        m_axi_A_ARLEN => grp_matxvec_fu_481_m_axi_A_ARLEN,
        m_axi_A_ARSIZE => grp_matxvec_fu_481_m_axi_A_ARSIZE,
        m_axi_A_ARBURST => grp_matxvec_fu_481_m_axi_A_ARBURST,
        m_axi_A_ARLOCK => grp_matxvec_fu_481_m_axi_A_ARLOCK,
        m_axi_A_ARCACHE => grp_matxvec_fu_481_m_axi_A_ARCACHE,
        m_axi_A_ARPROT => grp_matxvec_fu_481_m_axi_A_ARPROT,
        m_axi_A_ARQOS => grp_matxvec_fu_481_m_axi_A_ARQOS,
        m_axi_A_ARREGION => grp_matxvec_fu_481_m_axi_A_ARREGION,
        m_axi_A_ARUSER => grp_matxvec_fu_481_m_axi_A_ARUSER,
        m_axi_A_RVALID => A_RVALID,
        m_axi_A_RREADY => grp_matxvec_fu_481_m_axi_A_RREADY,
        m_axi_A_RDATA => A_RDATA,
        m_axi_A_RLAST => A_RLAST,
        m_axi_A_RID => A_RID,
        m_axi_A_RUSER => A_RUSER,
        m_axi_A_RRESP => A_RRESP,
        m_axi_A_BVALID => ap_const_logic_0,
        m_axi_A_BREADY => grp_matxvec_fu_481_m_axi_A_BREADY,
        m_axi_A_BRESP => ap_const_lv2_0,
        m_axi_A_BID => ap_const_lv1_0,
        m_axi_A_BUSER => ap_const_lv1_0,
        A_offset => A_offset1_reg_761,
        A_offset1 => tmp_s_reg_854,
        B_0_address0 => grp_matxvec_fu_481_B_0_address0,
        B_0_ce0 => grp_matxvec_fu_481_B_0_ce0,
        B_0_q0 => b_0_q0,
        B_0_address1 => grp_matxvec_fu_481_B_0_address1,
        B_0_ce1 => grp_matxvec_fu_481_B_0_ce1,
        B_0_q1 => b_0_q1,
        B_1_address0 => grp_matxvec_fu_481_B_1_address0,
        B_1_ce0 => grp_matxvec_fu_481_B_1_ce0,
        B_1_q0 => b_1_q0,
        B_1_address1 => grp_matxvec_fu_481_B_1_address1,
        B_1_ce1 => grp_matxvec_fu_481_B_1_ce1,
        B_1_q1 => b_1_q1,
        B_2_address0 => grp_matxvec_fu_481_B_2_address0,
        B_2_ce0 => grp_matxvec_fu_481_B_2_ce0,
        B_2_q0 => b_2_q0,
        B_2_address1 => grp_matxvec_fu_481_B_2_address1,
        B_2_ce1 => grp_matxvec_fu_481_B_2_ce1,
        B_2_q1 => b_2_q1,
        B_3_address0 => grp_matxvec_fu_481_B_3_address0,
        B_3_ce0 => grp_matxvec_fu_481_B_3_ce0,
        B_3_q0 => b_3_q0,
        B_3_address1 => grp_matxvec_fu_481_B_3_address1,
        B_3_ce1 => grp_matxvec_fu_481_B_3_ce1,
        B_3_q1 => b_3_q1,
        B_4_address0 => grp_matxvec_fu_481_B_4_address0,
        B_4_ce0 => grp_matxvec_fu_481_B_4_ce0,
        B_4_q0 => b_4_q0,
        B_4_address1 => grp_matxvec_fu_481_B_4_address1,
        B_4_ce1 => grp_matxvec_fu_481_B_4_ce1,
        B_4_q1 => b_4_q1,
        B_5_address0 => grp_matxvec_fu_481_B_5_address0,
        B_5_ce0 => grp_matxvec_fu_481_B_5_ce0,
        B_5_q0 => b_5_q0,
        B_5_address1 => grp_matxvec_fu_481_B_5_address1,
        B_5_ce1 => grp_matxvec_fu_481_B_5_ce1,
        B_5_q1 => b_5_q1,
        B_6_address0 => grp_matxvec_fu_481_B_6_address0,
        B_6_ce0 => grp_matxvec_fu_481_B_6_ce0,
        B_6_q0 => b_6_q0,
        B_6_address1 => grp_matxvec_fu_481_B_6_address1,
        B_6_ce1 => grp_matxvec_fu_481_B_6_ce1,
        B_6_q1 => b_6_q1,
        B_7_address0 => grp_matxvec_fu_481_B_7_address0,
        B_7_ce0 => grp_matxvec_fu_481_B_7_ce0,
        B_7_q0 => b_7_q0,
        B_7_address1 => grp_matxvec_fu_481_B_7_address1,
        B_7_ce1 => grp_matxvec_fu_481_B_7_ce1,
        B_7_q1 => b_7_q1,
        B_8_address0 => grp_matxvec_fu_481_B_8_address0,
        B_8_ce0 => grp_matxvec_fu_481_B_8_ce0,
        B_8_q0 => b_8_q0,
        B_8_address1 => grp_matxvec_fu_481_B_8_address1,
        B_8_ce1 => grp_matxvec_fu_481_B_8_ce1,
        B_8_q1 => b_8_q1,
        B_9_address0 => grp_matxvec_fu_481_B_9_address0,
        B_9_ce0 => grp_matxvec_fu_481_B_9_ce0,
        B_9_q0 => b_9_q0,
        B_9_address1 => grp_matxvec_fu_481_B_9_address1,
        B_9_ce1 => grp_matxvec_fu_481_B_9_ce1,
        B_9_q1 => b_9_q1,
        B_10_address0 => grp_matxvec_fu_481_B_10_address0,
        B_10_ce0 => grp_matxvec_fu_481_B_10_ce0,
        B_10_q0 => b_10_q0,
        B_10_address1 => grp_matxvec_fu_481_B_10_address1,
        B_10_ce1 => grp_matxvec_fu_481_B_10_ce1,
        B_10_q1 => b_10_q1,
        B_11_address0 => grp_matxvec_fu_481_B_11_address0,
        B_11_ce0 => grp_matxvec_fu_481_B_11_ce0,
        B_11_q0 => b_11_q0,
        B_11_address1 => grp_matxvec_fu_481_B_11_address1,
        B_11_ce1 => grp_matxvec_fu_481_B_11_ce1,
        B_11_q1 => b_11_q1,
        B_12_address0 => grp_matxvec_fu_481_B_12_address0,
        B_12_ce0 => grp_matxvec_fu_481_B_12_ce0,
        B_12_q0 => b_12_q0,
        B_12_address1 => grp_matxvec_fu_481_B_12_address1,
        B_12_ce1 => grp_matxvec_fu_481_B_12_ce1,
        B_12_q1 => b_12_q1,
        B_13_address0 => grp_matxvec_fu_481_B_13_address0,
        B_13_ce0 => grp_matxvec_fu_481_B_13_ce0,
        B_13_q0 => b_13_q0,
        B_13_address1 => grp_matxvec_fu_481_B_13_address1,
        B_13_ce1 => grp_matxvec_fu_481_B_13_ce1,
        B_13_q1 => b_13_q1,
        B_14_address0 => grp_matxvec_fu_481_B_14_address0,
        B_14_ce0 => grp_matxvec_fu_481_B_14_ce0,
        B_14_q0 => b_14_q0,
        B_14_address1 => grp_matxvec_fu_481_B_14_address1,
        B_14_ce1 => grp_matxvec_fu_481_B_14_ce1,
        B_14_q1 => b_14_q1,
        B_15_address0 => grp_matxvec_fu_481_B_15_address0,
        B_15_ce0 => grp_matxvec_fu_481_B_15_ce0,
        B_15_q0 => b_15_q0,
        B_15_address1 => grp_matxvec_fu_481_B_15_address1,
        B_15_ce1 => grp_matxvec_fu_481_B_15_ce1,
        B_15_q1 => b_15_q1,
        m_axi_C_AWVALID => grp_matxvec_fu_481_m_axi_C_AWVALID,
        m_axi_C_AWREADY => C_AWREADY,
        m_axi_C_AWADDR => grp_matxvec_fu_481_m_axi_C_AWADDR,
        m_axi_C_AWID => grp_matxvec_fu_481_m_axi_C_AWID,
        m_axi_C_AWLEN => grp_matxvec_fu_481_m_axi_C_AWLEN,
        m_axi_C_AWSIZE => grp_matxvec_fu_481_m_axi_C_AWSIZE,
        m_axi_C_AWBURST => grp_matxvec_fu_481_m_axi_C_AWBURST,
        m_axi_C_AWLOCK => grp_matxvec_fu_481_m_axi_C_AWLOCK,
        m_axi_C_AWCACHE => grp_matxvec_fu_481_m_axi_C_AWCACHE,
        m_axi_C_AWPROT => grp_matxvec_fu_481_m_axi_C_AWPROT,
        m_axi_C_AWQOS => grp_matxvec_fu_481_m_axi_C_AWQOS,
        m_axi_C_AWREGION => grp_matxvec_fu_481_m_axi_C_AWREGION,
        m_axi_C_AWUSER => grp_matxvec_fu_481_m_axi_C_AWUSER,
        m_axi_C_WVALID => grp_matxvec_fu_481_m_axi_C_WVALID,
        m_axi_C_WREADY => C_WREADY,
        m_axi_C_WDATA => grp_matxvec_fu_481_m_axi_C_WDATA,
        m_axi_C_WSTRB => grp_matxvec_fu_481_m_axi_C_WSTRB,
        m_axi_C_WLAST => grp_matxvec_fu_481_m_axi_C_WLAST,
        m_axi_C_WID => grp_matxvec_fu_481_m_axi_C_WID,
        m_axi_C_WUSER => grp_matxvec_fu_481_m_axi_C_WUSER,
        m_axi_C_ARVALID => grp_matxvec_fu_481_m_axi_C_ARVALID,
        m_axi_C_ARREADY => ap_const_logic_0,
        m_axi_C_ARADDR => grp_matxvec_fu_481_m_axi_C_ARADDR,
        m_axi_C_ARID => grp_matxvec_fu_481_m_axi_C_ARID,
        m_axi_C_ARLEN => grp_matxvec_fu_481_m_axi_C_ARLEN,
        m_axi_C_ARSIZE => grp_matxvec_fu_481_m_axi_C_ARSIZE,
        m_axi_C_ARBURST => grp_matxvec_fu_481_m_axi_C_ARBURST,
        m_axi_C_ARLOCK => grp_matxvec_fu_481_m_axi_C_ARLOCK,
        m_axi_C_ARCACHE => grp_matxvec_fu_481_m_axi_C_ARCACHE,
        m_axi_C_ARPROT => grp_matxvec_fu_481_m_axi_C_ARPROT,
        m_axi_C_ARQOS => grp_matxvec_fu_481_m_axi_C_ARQOS,
        m_axi_C_ARREGION => grp_matxvec_fu_481_m_axi_C_ARREGION,
        m_axi_C_ARUSER => grp_matxvec_fu_481_m_axi_C_ARUSER,
        m_axi_C_RVALID => ap_const_logic_0,
        m_axi_C_RREADY => grp_matxvec_fu_481_m_axi_C_RREADY,
        m_axi_C_RDATA => ap_const_lv32_0,
        m_axi_C_RLAST => ap_const_logic_0,
        m_axi_C_RID => ap_const_lv1_0,
        m_axi_C_RUSER => ap_const_lv1_0,
        m_axi_C_RRESP => ap_const_lv2_0,
        m_axi_C_BVALID => C_BVALID,
        m_axi_C_BREADY => grp_matxvec_fu_481_m_axi_C_BREADY,
        m_axi_C_BRESP => C_BRESP,
        m_axi_C_BID => C_BID,
        m_axi_C_BUSER => C_BUSER,
        C_offset => C_offset5_reg_751,
        C_offset2 => sum6_reg_859);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((exitcond3_fu_543_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                elsif (((exitcond3_fu_543_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_B_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_B_ARREADY <= ap_const_logic_0;
            else
                if ((ap_const_boolean_1 = ap_condition_1296)) then
                    if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
                        ap_reg_ioackin_B_ARREADY <= ap_const_logic_0;
                    elsif (((ap_const_logic_1 = B_ARREADY) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001))) then 
                        ap_reg_ioackin_B_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    grp_matxvec_fu_481_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_matxvec_fu_481_ap_start_reg <= ap_const_logic_0;
            else
                if (((exitcond_fu_716_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                    grp_matxvec_fu_481_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_matxvec_fu_481_ap_ready = ap_const_logic_1)) then 
                    grp_matxvec_fu_481_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_448_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_reg_782 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_reg_448 <= i_cast6_mid2_v_reg_791;
            elsif (((exitcond3_fu_543_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_reg_448 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_437_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_fu_572_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_437 <= indvar_flatten_next_fu_578_p2;
            elsif (((exitcond3_fu_543_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                indvar_flatten_reg_437 <= ap_const_lv17_0;
            end if; 
        end if;
    end process;

    j_reg_459_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_fu_572_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                j_reg_459 <= j_1_fu_674_p2;
            elsif (((exitcond3_fu_543_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_reg_459 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    k_reg_426_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (exitcond_fu_716_p2 = ap_const_lv1_1))) then 
                k_reg_426 <= k_2_reg_770;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                k_reg_426 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    p_reg_470_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                p_reg_470 <= ap_const_lv11_0;
            elsif (((grp_matxvec_fu_481_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                p_reg_470 <= p_1_reg_849;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                A_offset1_reg_761 <= A_offset(31 downto 2);
                C_offset5_reg_751 <= C_offset(31 downto 2);
                    tmp_15_cast_reg_756(29 downto 0) <= tmp_15_cast_fu_529_p1(29 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_fu_572_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                B4_sum7_reg_797 <= B4_sum7_fu_637_p2;
                arrayNo_cast_reg_806 <= j_mid2_fu_596_p3(6 downto 2);
                tmp_10_reg_810 <= tmp_10_fu_670_p1;
                tmp_7_reg_802 <= tmp_7_fu_654_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                B_addr_read_reg_826 <= B_RDATA;
                arrayNo_cast_reg_806_pp0_iter2_reg <= arrayNo_cast_reg_806_pp0_iter1_reg;
                arrayNo_cast_reg_806_pp0_iter3_reg <= arrayNo_cast_reg_806_pp0_iter2_reg;
                arrayNo_cast_reg_806_pp0_iter4_reg <= arrayNo_cast_reg_806_pp0_iter3_reg;
                arrayNo_cast_reg_806_pp0_iter5_reg <= arrayNo_cast_reg_806_pp0_iter4_reg;
                arrayNo_cast_reg_806_pp0_iter6_reg <= arrayNo_cast_reg_806_pp0_iter5_reg;
                arrayNo_cast_reg_806_pp0_iter7_reg <= arrayNo_cast_reg_806_pp0_iter6_reg;
                arrayNo_cast_reg_806_pp0_iter8_reg <= arrayNo_cast_reg_806_pp0_iter7_reg;
                i_cast6_mid2_v_reg_791_pp0_iter2_reg <= i_cast6_mid2_v_reg_791_pp0_iter1_reg;
                i_cast6_mid2_v_reg_791_pp0_iter3_reg <= i_cast6_mid2_v_reg_791_pp0_iter2_reg;
                i_cast6_mid2_v_reg_791_pp0_iter4_reg <= i_cast6_mid2_v_reg_791_pp0_iter3_reg;
                i_cast6_mid2_v_reg_791_pp0_iter5_reg <= i_cast6_mid2_v_reg_791_pp0_iter4_reg;
                i_cast6_mid2_v_reg_791_pp0_iter6_reg <= i_cast6_mid2_v_reg_791_pp0_iter5_reg;
                i_cast6_mid2_v_reg_791_pp0_iter7_reg <= i_cast6_mid2_v_reg_791_pp0_iter6_reg;
                i_cast6_mid2_v_reg_791_pp0_iter8_reg <= i_cast6_mid2_v_reg_791_pp0_iter7_reg;
                tmp_10_reg_810_pp0_iter2_reg <= tmp_10_reg_810_pp0_iter1_reg;
                tmp_10_reg_810_pp0_iter3_reg <= tmp_10_reg_810_pp0_iter2_reg;
                tmp_10_reg_810_pp0_iter4_reg <= tmp_10_reg_810_pp0_iter3_reg;
                tmp_10_reg_810_pp0_iter5_reg <= tmp_10_reg_810_pp0_iter4_reg;
                tmp_10_reg_810_pp0_iter6_reg <= tmp_10_reg_810_pp0_iter5_reg;
                tmp_10_reg_810_pp0_iter7_reg <= tmp_10_reg_810_pp0_iter6_reg;
                tmp_10_reg_810_pp0_iter8_reg <= tmp_10_reg_810_pp0_iter7_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                arrayNo_cast_reg_806_pp0_iter1_reg <= arrayNo_cast_reg_806;
                exitcond_flatten_reg_782 <= exitcond_flatten_fu_572_p2;
                i_cast6_mid2_v_reg_791_pp0_iter1_reg <= i_cast6_mid2_v_reg_791;
                tmp_10_reg_810_pp0_iter1_reg <= tmp_10_reg_810;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_fu_572_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                i_cast6_mid2_v_reg_791 <= i_cast6_mid2_v_fu_604_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                k_2_reg_770 <= k_2_fu_549_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                p_1_reg_849 <= p_1_fu_722_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_716_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    sum6_reg_859(19 downto 6) <= sum6_fu_741_p4(19 downto 6);
                    tmp_s_reg_854(19 downto 10) <= tmp_s_fu_732_p3(19 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_543_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_1_reg_775 <= tmp_1_fu_555_p1;
            end if;
        end if;
    end process;
    tmp_15_cast_reg_756(30) <= '0';
    tmp_s_reg_854(9 downto 0) <= "0000000000";
    sum6_reg_859(5 downto 0) <= "000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter8, exitcond3_fu_543_p2, ap_CS_fsm_state2, exitcond_flatten_fu_572_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_state14, exitcond_fu_716_p2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter9, grp_matxvec_fu_481_ap_done, ap_CS_fsm_state15)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_543_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond_flatten_fu_572_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond_flatten_fu_572_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (exitcond_fu_716_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state15 => 
                if (((grp_matxvec_fu_481_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;

    A_ARVALID_assign_proc : process(ap_CS_fsm_state14, exitcond_fu_716_p2, grp_matxvec_fu_481_m_axi_A_ARVALID, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or ((exitcond_fu_716_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then 
            A_ARVALID <= grp_matxvec_fu_481_m_axi_A_ARVALID;
        else 
            A_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    A_RREADY_assign_proc : process(ap_CS_fsm_state14, exitcond_fu_716_p2, grp_matxvec_fu_481_m_axi_A_RREADY, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or ((exitcond_fu_716_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then 
            A_RREADY <= grp_matxvec_fu_481_m_axi_A_RREADY;
        else 
            A_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    B4_sum7_cast_fu_680_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B4_sum7_reg_797),32));
    B4_sum7_fu_637_p2 <= std_logic_vector(unsigned(tmp_10_mid2_cast_fu_633_p1) + unsigned(tmp_15_cast_reg_756));

    B_ARVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_7_reg_802, ap_reg_ioackin_B_ARREADY, ap_block_pp0_stage0_01001)
    begin
        if (((ap_reg_ioackin_B_ARREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_7_reg_802 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001))) then 
            B_ARVALID <= ap_const_logic_1;
        else 
            B_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    B_RREADY_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            B_RREADY <= ap_const_logic_1;
        else 
            B_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    B_blk_n_AR_assign_proc : process(m_axi_B_ARREADY, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_7_reg_802)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_7_reg_802 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            B_blk_n_AR <= m_axi_B_ARREADY;
        else 
            B_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    B_blk_n_R_assign_proc : process(m_axi_B_RVALID, ap_block_pp0_stage0, ap_enable_reg_pp0_iter8)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            B_blk_n_R <= m_axi_B_RVALID;
        else 
            B_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    C_AWVALID_assign_proc : process(ap_CS_fsm_state14, exitcond_fu_716_p2, grp_matxvec_fu_481_m_axi_C_AWVALID, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or ((exitcond_fu_716_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then 
            C_AWVALID <= grp_matxvec_fu_481_m_axi_C_AWVALID;
        else 
            C_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    C_BREADY_assign_proc : process(ap_CS_fsm_state14, exitcond_fu_716_p2, grp_matxvec_fu_481_m_axi_C_BREADY, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or ((exitcond_fu_716_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then 
            C_BREADY <= grp_matxvec_fu_481_m_axi_C_BREADY;
        else 
            C_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    C_WVALID_assign_proc : process(ap_CS_fsm_state14, exitcond_fu_716_p2, grp_matxvec_fu_481_m_axi_C_WVALID, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or ((exitcond_fu_716_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then 
            C_WVALID <= grp_matxvec_fu_481_m_axi_C_WVALID;
        else 
            C_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state13 <= ap_CS_fsm(3);
    ap_CS_fsm_state14 <= ap_CS_fsm(4);
    ap_CS_fsm_state15 <= ap_CS_fsm(5);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter8, B_RVALID)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_const_logic_0 = B_RVALID) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter8, B_RVALID, ap_block_state4_io)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_const_logic_0 = B_RVALID) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state4_io) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter8, B_RVALID, ap_block_state4_io)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_const_logic_0 = B_RVALID) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state4_io) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;

        ap_block_state10_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state11_pp0_stage0_iter8_assign_proc : process(B_RVALID)
    begin
                ap_block_state11_pp0_stage0_iter8 <= (ap_const_logic_0 = B_RVALID);
    end process;

        ap_block_state12_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_io_assign_proc : process(tmp_7_reg_802, ap_sig_ioackin_B_ARREADY)
    begin
                ap_block_state4_io <= ((ap_sig_ioackin_B_ARREADY = ap_const_logic_0) and (tmp_7_reg_802 = ap_const_lv1_1));
    end process;

        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_1296_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_7_reg_802)
    begin
                ap_condition_1296 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_7_reg_802 = ap_const_lv1_1));
    end process;


    ap_condition_pp0_exit_iter0_state3_assign_proc : process(exitcond_flatten_fu_572_p2)
    begin
        if ((exitcond_flatten_fu_572_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(exitcond3_fu_543_p2, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_543_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter9)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_phi_fu_452_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, i_reg_448, exitcond_flatten_reg_782, i_cast6_mid2_v_reg_791)
    begin
        if (((exitcond_flatten_reg_782 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_i_phi_fu_452_p4 <= i_cast6_mid2_v_reg_791;
        else 
            ap_phi_mux_i_phi_fu_452_p4 <= i_reg_448;
        end if; 
    end process;


    ap_ready_assign_proc : process(exitcond3_fu_543_p2, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_543_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_ioackin_B_ARREADY_assign_proc : process(B_ARREADY, ap_reg_ioackin_B_ARREADY)
    begin
        if ((ap_reg_ioackin_B_ARREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_B_ARREADY <= B_ARREADY;
        else 
            ap_sig_ioackin_B_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    b_0_address0_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter9, grp_matxvec_fu_481_B_0_address0, ap_CS_fsm_state15, tmp_12_fu_696_p1)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            b_0_address0 <= tmp_12_fu_696_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            b_0_address0 <= grp_matxvec_fu_481_B_0_address0;
        else 
            b_0_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    b_0_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter9, grp_matxvec_fu_481_B_0_ce0, ap_CS_fsm_state15)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            b_0_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            b_0_ce0 <= grp_matxvec_fu_481_B_0_ce0;
        else 
            b_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_0_ce1_assign_proc : process(grp_matxvec_fu_481_B_0_ce1, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            b_0_ce1 <= grp_matxvec_fu_481_B_0_ce1;
        else 
            b_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    b_0_we0_assign_proc : process(ap_block_pp0_stage0_11001, arrayNo_cast_reg_806_pp0_iter8_reg, ap_enable_reg_pp0_iter9)
    begin
        if (((arrayNo_cast_reg_806_pp0_iter8_reg = ap_const_lv5_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            b_0_we0 <= ap_const_logic_1;
        else 
            b_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    b_10_address0_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter9, grp_matxvec_fu_481_B_10_address0, ap_CS_fsm_state15, tmp_12_fu_696_p1)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            b_10_address0 <= tmp_12_fu_696_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            b_10_address0 <= grp_matxvec_fu_481_B_10_address0;
        else 
            b_10_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    b_10_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter9, grp_matxvec_fu_481_B_10_ce0, ap_CS_fsm_state15)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            b_10_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            b_10_ce0 <= grp_matxvec_fu_481_B_10_ce0;
        else 
            b_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_10_ce1_assign_proc : process(grp_matxvec_fu_481_B_10_ce1, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            b_10_ce1 <= grp_matxvec_fu_481_B_10_ce1;
        else 
            b_10_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    b_10_we0_assign_proc : process(ap_block_pp0_stage0_11001, arrayNo_cast_reg_806_pp0_iter8_reg, ap_enable_reg_pp0_iter9)
    begin
        if (((arrayNo_cast_reg_806_pp0_iter8_reg = ap_const_lv5_A) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            b_10_we0 <= ap_const_logic_1;
        else 
            b_10_we0 <= ap_const_logic_0;
        end if; 
    end process;


    b_11_address0_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter9, grp_matxvec_fu_481_B_11_address0, ap_CS_fsm_state15, tmp_12_fu_696_p1)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            b_11_address0 <= tmp_12_fu_696_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            b_11_address0 <= grp_matxvec_fu_481_B_11_address0;
        else 
            b_11_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    b_11_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter9, grp_matxvec_fu_481_B_11_ce0, ap_CS_fsm_state15)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            b_11_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            b_11_ce0 <= grp_matxvec_fu_481_B_11_ce0;
        else 
            b_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_11_ce1_assign_proc : process(grp_matxvec_fu_481_B_11_ce1, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            b_11_ce1 <= grp_matxvec_fu_481_B_11_ce1;
        else 
            b_11_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    b_11_we0_assign_proc : process(ap_block_pp0_stage0_11001, arrayNo_cast_reg_806_pp0_iter8_reg, ap_enable_reg_pp0_iter9)
    begin
        if (((arrayNo_cast_reg_806_pp0_iter8_reg = ap_const_lv5_B) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            b_11_we0 <= ap_const_logic_1;
        else 
            b_11_we0 <= ap_const_logic_0;
        end if; 
    end process;


    b_12_address0_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter9, grp_matxvec_fu_481_B_12_address0, ap_CS_fsm_state15, tmp_12_fu_696_p1)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            b_12_address0 <= tmp_12_fu_696_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            b_12_address0 <= grp_matxvec_fu_481_B_12_address0;
        else 
            b_12_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    b_12_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter9, grp_matxvec_fu_481_B_12_ce0, ap_CS_fsm_state15)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            b_12_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            b_12_ce0 <= grp_matxvec_fu_481_B_12_ce0;
        else 
            b_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_12_ce1_assign_proc : process(grp_matxvec_fu_481_B_12_ce1, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            b_12_ce1 <= grp_matxvec_fu_481_B_12_ce1;
        else 
            b_12_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    b_12_we0_assign_proc : process(ap_block_pp0_stage0_11001, arrayNo_cast_reg_806_pp0_iter8_reg, ap_enable_reg_pp0_iter9)
    begin
        if (((arrayNo_cast_reg_806_pp0_iter8_reg = ap_const_lv5_C) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            b_12_we0 <= ap_const_logic_1;
        else 
            b_12_we0 <= ap_const_logic_0;
        end if; 
    end process;


    b_13_address0_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter9, grp_matxvec_fu_481_B_13_address0, ap_CS_fsm_state15, tmp_12_fu_696_p1)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            b_13_address0 <= tmp_12_fu_696_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            b_13_address0 <= grp_matxvec_fu_481_B_13_address0;
        else 
            b_13_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    b_13_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter9, grp_matxvec_fu_481_B_13_ce0, ap_CS_fsm_state15)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            b_13_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            b_13_ce0 <= grp_matxvec_fu_481_B_13_ce0;
        else 
            b_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_13_ce1_assign_proc : process(grp_matxvec_fu_481_B_13_ce1, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            b_13_ce1 <= grp_matxvec_fu_481_B_13_ce1;
        else 
            b_13_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    b_13_we0_assign_proc : process(ap_block_pp0_stage0_11001, arrayNo_cast_reg_806_pp0_iter8_reg, ap_enable_reg_pp0_iter9)
    begin
        if (((arrayNo_cast_reg_806_pp0_iter8_reg = ap_const_lv5_D) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            b_13_we0 <= ap_const_logic_1;
        else 
            b_13_we0 <= ap_const_logic_0;
        end if; 
    end process;


    b_14_address0_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter9, grp_matxvec_fu_481_B_14_address0, ap_CS_fsm_state15, tmp_12_fu_696_p1)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            b_14_address0 <= tmp_12_fu_696_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            b_14_address0 <= grp_matxvec_fu_481_B_14_address0;
        else 
            b_14_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    b_14_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter9, grp_matxvec_fu_481_B_14_ce0, ap_CS_fsm_state15)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            b_14_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            b_14_ce0 <= grp_matxvec_fu_481_B_14_ce0;
        else 
            b_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_14_ce1_assign_proc : process(grp_matxvec_fu_481_B_14_ce1, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            b_14_ce1 <= grp_matxvec_fu_481_B_14_ce1;
        else 
            b_14_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    b_14_we0_assign_proc : process(ap_block_pp0_stage0_11001, arrayNo_cast_reg_806_pp0_iter8_reg, ap_enable_reg_pp0_iter9)
    begin
        if (((arrayNo_cast_reg_806_pp0_iter8_reg = ap_const_lv5_E) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            b_14_we0 <= ap_const_logic_1;
        else 
            b_14_we0 <= ap_const_logic_0;
        end if; 
    end process;


    b_15_address0_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter9, grp_matxvec_fu_481_B_15_address0, ap_CS_fsm_state15, tmp_12_fu_696_p1)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            b_15_address0 <= tmp_12_fu_696_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            b_15_address0 <= grp_matxvec_fu_481_B_15_address0;
        else 
            b_15_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    b_15_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter9, grp_matxvec_fu_481_B_15_ce0, ap_CS_fsm_state15)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            b_15_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            b_15_ce0 <= grp_matxvec_fu_481_B_15_ce0;
        else 
            b_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_15_ce1_assign_proc : process(grp_matxvec_fu_481_B_15_ce1, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            b_15_ce1 <= grp_matxvec_fu_481_B_15_ce1;
        else 
            b_15_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    b_15_we0_assign_proc : process(ap_block_pp0_stage0_11001, arrayNo_cast_reg_806_pp0_iter8_reg, ap_enable_reg_pp0_iter9)
    begin
        if ((not((arrayNo_cast_reg_806_pp0_iter8_reg = ap_const_lv5_0)) and not((arrayNo_cast_reg_806_pp0_iter8_reg = ap_const_lv5_1)) and not((arrayNo_cast_reg_806_pp0_iter8_reg = ap_const_lv5_2)) and not((arrayNo_cast_reg_806_pp0_iter8_reg = ap_const_lv5_3)) and not((arrayNo_cast_reg_806_pp0_iter8_reg = ap_const_lv5_4)) and not((arrayNo_cast_reg_806_pp0_iter8_reg = ap_const_lv5_5)) and not((arrayNo_cast_reg_806_pp0_iter8_reg = ap_const_lv5_6)) and not((arrayNo_cast_reg_806_pp0_iter8_reg = ap_const_lv5_7)) and not((arrayNo_cast_reg_806_pp0_iter8_reg = ap_const_lv5_8)) and not((arrayNo_cast_reg_806_pp0_iter8_reg = ap_const_lv5_9)) and not((arrayNo_cast_reg_806_pp0_iter8_reg = ap_const_lv5_A)) and not((arrayNo_cast_reg_806_pp0_iter8_reg = ap_const_lv5_B)) and not((arrayNo_cast_reg_806_pp0_iter8_reg = ap_const_lv5_C)) and not((arrayNo_cast_reg_806_pp0_iter8_reg = ap_const_lv5_D)) and not((arrayNo_cast_reg_806_pp0_iter8_reg = ap_const_lv5_E)) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            b_15_we0 <= ap_const_logic_1;
        else 
            b_15_we0 <= ap_const_logic_0;
        end if; 
    end process;


    b_1_address0_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter9, grp_matxvec_fu_481_B_1_address0, ap_CS_fsm_state15, tmp_12_fu_696_p1)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            b_1_address0 <= tmp_12_fu_696_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            b_1_address0 <= grp_matxvec_fu_481_B_1_address0;
        else 
            b_1_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    b_1_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter9, grp_matxvec_fu_481_B_1_ce0, ap_CS_fsm_state15)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            b_1_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            b_1_ce0 <= grp_matxvec_fu_481_B_1_ce0;
        else 
            b_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_1_ce1_assign_proc : process(grp_matxvec_fu_481_B_1_ce1, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            b_1_ce1 <= grp_matxvec_fu_481_B_1_ce1;
        else 
            b_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    b_1_we0_assign_proc : process(ap_block_pp0_stage0_11001, arrayNo_cast_reg_806_pp0_iter8_reg, ap_enable_reg_pp0_iter9)
    begin
        if (((arrayNo_cast_reg_806_pp0_iter8_reg = ap_const_lv5_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            b_1_we0 <= ap_const_logic_1;
        else 
            b_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    b_2_address0_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter9, grp_matxvec_fu_481_B_2_address0, ap_CS_fsm_state15, tmp_12_fu_696_p1)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            b_2_address0 <= tmp_12_fu_696_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            b_2_address0 <= grp_matxvec_fu_481_B_2_address0;
        else 
            b_2_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    b_2_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter9, grp_matxvec_fu_481_B_2_ce0, ap_CS_fsm_state15)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            b_2_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            b_2_ce0 <= grp_matxvec_fu_481_B_2_ce0;
        else 
            b_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_2_ce1_assign_proc : process(grp_matxvec_fu_481_B_2_ce1, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            b_2_ce1 <= grp_matxvec_fu_481_B_2_ce1;
        else 
            b_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    b_2_we0_assign_proc : process(ap_block_pp0_stage0_11001, arrayNo_cast_reg_806_pp0_iter8_reg, ap_enable_reg_pp0_iter9)
    begin
        if (((arrayNo_cast_reg_806_pp0_iter8_reg = ap_const_lv5_2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            b_2_we0 <= ap_const_logic_1;
        else 
            b_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    b_3_address0_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter9, grp_matxvec_fu_481_B_3_address0, ap_CS_fsm_state15, tmp_12_fu_696_p1)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            b_3_address0 <= tmp_12_fu_696_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            b_3_address0 <= grp_matxvec_fu_481_B_3_address0;
        else 
            b_3_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    b_3_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter9, grp_matxvec_fu_481_B_3_ce0, ap_CS_fsm_state15)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            b_3_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            b_3_ce0 <= grp_matxvec_fu_481_B_3_ce0;
        else 
            b_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_3_ce1_assign_proc : process(grp_matxvec_fu_481_B_3_ce1, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            b_3_ce1 <= grp_matxvec_fu_481_B_3_ce1;
        else 
            b_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    b_3_we0_assign_proc : process(ap_block_pp0_stage0_11001, arrayNo_cast_reg_806_pp0_iter8_reg, ap_enable_reg_pp0_iter9)
    begin
        if (((arrayNo_cast_reg_806_pp0_iter8_reg = ap_const_lv5_3) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            b_3_we0 <= ap_const_logic_1;
        else 
            b_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    b_4_address0_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter9, grp_matxvec_fu_481_B_4_address0, ap_CS_fsm_state15, tmp_12_fu_696_p1)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            b_4_address0 <= tmp_12_fu_696_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            b_4_address0 <= grp_matxvec_fu_481_B_4_address0;
        else 
            b_4_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    b_4_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter9, grp_matxvec_fu_481_B_4_ce0, ap_CS_fsm_state15)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            b_4_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            b_4_ce0 <= grp_matxvec_fu_481_B_4_ce0;
        else 
            b_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_4_ce1_assign_proc : process(grp_matxvec_fu_481_B_4_ce1, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            b_4_ce1 <= grp_matxvec_fu_481_B_4_ce1;
        else 
            b_4_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    b_4_we0_assign_proc : process(ap_block_pp0_stage0_11001, arrayNo_cast_reg_806_pp0_iter8_reg, ap_enable_reg_pp0_iter9)
    begin
        if (((arrayNo_cast_reg_806_pp0_iter8_reg = ap_const_lv5_4) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            b_4_we0 <= ap_const_logic_1;
        else 
            b_4_we0 <= ap_const_logic_0;
        end if; 
    end process;


    b_5_address0_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter9, grp_matxvec_fu_481_B_5_address0, ap_CS_fsm_state15, tmp_12_fu_696_p1)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            b_5_address0 <= tmp_12_fu_696_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            b_5_address0 <= grp_matxvec_fu_481_B_5_address0;
        else 
            b_5_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    b_5_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter9, grp_matxvec_fu_481_B_5_ce0, ap_CS_fsm_state15)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            b_5_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            b_5_ce0 <= grp_matxvec_fu_481_B_5_ce0;
        else 
            b_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_5_ce1_assign_proc : process(grp_matxvec_fu_481_B_5_ce1, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            b_5_ce1 <= grp_matxvec_fu_481_B_5_ce1;
        else 
            b_5_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    b_5_we0_assign_proc : process(ap_block_pp0_stage0_11001, arrayNo_cast_reg_806_pp0_iter8_reg, ap_enable_reg_pp0_iter9)
    begin
        if (((arrayNo_cast_reg_806_pp0_iter8_reg = ap_const_lv5_5) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            b_5_we0 <= ap_const_logic_1;
        else 
            b_5_we0 <= ap_const_logic_0;
        end if; 
    end process;


    b_6_address0_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter9, grp_matxvec_fu_481_B_6_address0, ap_CS_fsm_state15, tmp_12_fu_696_p1)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            b_6_address0 <= tmp_12_fu_696_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            b_6_address0 <= grp_matxvec_fu_481_B_6_address0;
        else 
            b_6_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    b_6_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter9, grp_matxvec_fu_481_B_6_ce0, ap_CS_fsm_state15)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            b_6_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            b_6_ce0 <= grp_matxvec_fu_481_B_6_ce0;
        else 
            b_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_6_ce1_assign_proc : process(grp_matxvec_fu_481_B_6_ce1, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            b_6_ce1 <= grp_matxvec_fu_481_B_6_ce1;
        else 
            b_6_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    b_6_we0_assign_proc : process(ap_block_pp0_stage0_11001, arrayNo_cast_reg_806_pp0_iter8_reg, ap_enable_reg_pp0_iter9)
    begin
        if (((arrayNo_cast_reg_806_pp0_iter8_reg = ap_const_lv5_6) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            b_6_we0 <= ap_const_logic_1;
        else 
            b_6_we0 <= ap_const_logic_0;
        end if; 
    end process;


    b_7_address0_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter9, grp_matxvec_fu_481_B_7_address0, ap_CS_fsm_state15, tmp_12_fu_696_p1)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            b_7_address0 <= tmp_12_fu_696_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            b_7_address0 <= grp_matxvec_fu_481_B_7_address0;
        else 
            b_7_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    b_7_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter9, grp_matxvec_fu_481_B_7_ce0, ap_CS_fsm_state15)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            b_7_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            b_7_ce0 <= grp_matxvec_fu_481_B_7_ce0;
        else 
            b_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_7_ce1_assign_proc : process(grp_matxvec_fu_481_B_7_ce1, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            b_7_ce1 <= grp_matxvec_fu_481_B_7_ce1;
        else 
            b_7_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    b_7_we0_assign_proc : process(ap_block_pp0_stage0_11001, arrayNo_cast_reg_806_pp0_iter8_reg, ap_enable_reg_pp0_iter9)
    begin
        if (((arrayNo_cast_reg_806_pp0_iter8_reg = ap_const_lv5_7) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            b_7_we0 <= ap_const_logic_1;
        else 
            b_7_we0 <= ap_const_logic_0;
        end if; 
    end process;


    b_8_address0_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter9, grp_matxvec_fu_481_B_8_address0, ap_CS_fsm_state15, tmp_12_fu_696_p1)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            b_8_address0 <= tmp_12_fu_696_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            b_8_address0 <= grp_matxvec_fu_481_B_8_address0;
        else 
            b_8_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    b_8_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter9, grp_matxvec_fu_481_B_8_ce0, ap_CS_fsm_state15)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            b_8_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            b_8_ce0 <= grp_matxvec_fu_481_B_8_ce0;
        else 
            b_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_8_ce1_assign_proc : process(grp_matxvec_fu_481_B_8_ce1, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            b_8_ce1 <= grp_matxvec_fu_481_B_8_ce1;
        else 
            b_8_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    b_8_we0_assign_proc : process(ap_block_pp0_stage0_11001, arrayNo_cast_reg_806_pp0_iter8_reg, ap_enable_reg_pp0_iter9)
    begin
        if (((arrayNo_cast_reg_806_pp0_iter8_reg = ap_const_lv5_8) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            b_8_we0 <= ap_const_logic_1;
        else 
            b_8_we0 <= ap_const_logic_0;
        end if; 
    end process;


    b_9_address0_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter9, grp_matxvec_fu_481_B_9_address0, ap_CS_fsm_state15, tmp_12_fu_696_p1)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            b_9_address0 <= tmp_12_fu_696_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            b_9_address0 <= grp_matxvec_fu_481_B_9_address0;
        else 
            b_9_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    b_9_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter9, grp_matxvec_fu_481_B_9_ce0, ap_CS_fsm_state15)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            b_9_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            b_9_ce0 <= grp_matxvec_fu_481_B_9_ce0;
        else 
            b_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_9_ce1_assign_proc : process(grp_matxvec_fu_481_B_9_ce1, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            b_9_ce1 <= grp_matxvec_fu_481_B_9_ce1;
        else 
            b_9_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    b_9_we0_assign_proc : process(ap_block_pp0_stage0_11001, arrayNo_cast_reg_806_pp0_iter8_reg, ap_enable_reg_pp0_iter9)
    begin
        if (((arrayNo_cast_reg_806_pp0_iter8_reg = ap_const_lv5_9) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            b_9_we0 <= ap_const_logic_1;
        else 
            b_9_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_590_p2 <= "1" when (j_reg_459 = ap_const_lv7_40) else "0";
    exitcond3_fu_543_p2 <= "1" when (k_reg_426 = ap_const_lv5_10) else "0";
    exitcond_flatten_fu_572_p2 <= "1" when (indvar_flatten_reg_437 = ap_const_lv17_10000) else "0";
    exitcond_fu_716_p2 <= "1" when (p_reg_470 = ap_const_lv11_400) else "0";
    grp_matxvec_fu_481_ap_start <= grp_matxvec_fu_481_ap_start_reg;
    i_1_fu_584_p2 <= std_logic_vector(unsigned(ap_const_lv11_1) + unsigned(ap_phi_mux_i_phi_fu_452_p4));
    i_cast6_mid2_v_fu_604_p3 <= 
        i_1_fu_584_p2 when (exitcond1_fu_590_p2(0) = '1') else 
        ap_phi_mux_i_phi_fu_452_p4;
    indvar_flatten_next_fu_578_p2 <= std_logic_vector(unsigned(ap_const_lv17_1) + unsigned(indvar_flatten_reg_437));
    j_1_fu_674_p2 <= std_logic_vector(unsigned(j_mid2_fu_596_p3) + unsigned(ap_const_lv7_1));
    j_mid2_fu_596_p3 <= 
        ap_const_lv7_0 when (exitcond1_fu_590_p2(0) = '1') else 
        j_reg_459;
    k_2_fu_549_p2 <= std_logic_vector(unsigned(k_reg_426) + unsigned(ap_const_lv5_1));
    p_1_fu_722_p2 <= std_logic_vector(unsigned(p_reg_470) + unsigned(ap_const_lv11_1));
    sum6_fu_741_p4 <= ((tmp_13_fu_728_p1 & tmp_1_reg_775) & ap_const_lv6_0);
    tmp_10_fu_670_p1 <= j_mid2_fu_596_p3(2 - 1 downto 0);
    tmp_10_mid2_cast_fu_633_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_625_p3),31));
    tmp_11_fu_690_p3 <= (i_cast6_mid2_v_reg_791_pp0_iter8_reg & tmp_10_reg_810_pp0_iter8_reg);
    tmp_12_fu_696_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_690_p3),32));
    tmp_13_fu_728_p1 <= p_reg_470(10 - 1 downto 0);
    tmp_15_cast_fu_529_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_519_p4),31));
    tmp_1_fu_555_p1 <= k_reg_426(4 - 1 downto 0);
    tmp_2_fu_559_p1 <= ap_phi_mux_i_phi_fu_452_p4(10 - 1 downto 0);
    tmp_3_fu_612_p1 <= i_1_fu_584_p2(10 - 1 downto 0);
    tmp_4_fu_625_p3 <= 
        tmp_9_mid1_fu_616_p4 when (exitcond1_fu_590_p2(0) = '1') else 
        tmp_9_fu_563_p4;
    tmp_5_fu_642_p1 <= indvar_flatten_reg_437(6 - 1 downto 0);
    tmp_6_fu_646_p3 <= (ap_const_lv11_0 & tmp_5_fu_642_p1);
    tmp_7_fu_654_p2 <= "1" when (tmp_6_fu_646_p3 = ap_const_lv17_0) else "0";
    tmp_9_fu_563_p4 <= ((tmp_2_fu_559_p1 & tmp_1_reg_775) & ap_const_lv6_0);
    tmp_9_mid1_fu_616_p4 <= ((tmp_3_fu_612_p1 & tmp_1_reg_775) & ap_const_lv6_0);
    tmp_fu_519_p4 <= B_offset(31 downto 2);
    tmp_s_fu_732_p3 <= (tmp_13_fu_728_p1 & ap_const_lv10_0);
end behav;
