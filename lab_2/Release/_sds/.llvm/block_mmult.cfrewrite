void p_0_block_mmult_1_noasync(float A[1048576], float B[1048576], float C[1048576]);
void p_0_block_mmult_1_noasync(float A[1048576], float B[1048576], float C[1048576])
{
  int start_seq[1];
  start_seq[0] = 0;
  cf_request_handle_t p_0_hwinst_block_mmult_1_cmd;
  cf_send_i(&(p_0_hwinst_block_mmult_1.cmd_block_mmult), start_seq, 1 * sizeof(int), &p_0_hwinst_block_mmult_1_cmd);
  cf_wait(p_0_hwinst_block_mmult_1_cmd);


#ifdef SDS_DEBUG
  if ((1024*1024) * 4 != 1048576*4)
    printf("A of function block_mmult transfer size (%d) is different from declared size (1048576*4).  Ensure accelerator is consistent with any copy pragma.\n",(1024*1024) * 4);
  if ((1024*1024) * 4 != 1048576*4)
    printf("B of function block_mmult transfer size (%d) is different from declared size (1048576*4).  Ensure accelerator is consistent with any copy pragma.\n",(1024*1024) * 4);
  if ((1024*1024) * 4 != 1048576*4)
    printf("C of function block_mmult transfer size (%d) is different from declared size (1048576*4).  Ensure accelerator is consistent with any copy pragma.\n",(1024*1024) * 4);
#endif

  cf_send_ref_i(&(p_0_hwinst_block_mmult_1.A_offset), &A, (1024*1024) * 4, &p_0_request_0);
  cf_send_ref_i(&(p_0_hwinst_block_mmult_1.B_offset), &B, (1024*1024) * 4, &p_0_request_1);
  cf_send_ref_i(&(p_0_hwinst_block_mmult_1.C_offset), &C, (1024*1024) * 4, &p_0_request_2);


  cf_wait(p_0_request_2);
}

